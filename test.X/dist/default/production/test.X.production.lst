

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Tue Feb  6 09:53:30 2018

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F25K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    41                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    42  0000                     
    43                           ; Version 1.44
    44                           ; Generated 14/09/2017 GMT
    45                           ; 
    46                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    47                           ; All rights reserved.
    48                           ; 
    49                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    50                           ; 
    51                           ; Redistribution and use in source and binary forms, with or without modification, are
    52                           ; permitted provided that the following conditions are met:
    53                           ; 
    54                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    55                           ;        conditions and the following disclaimer.
    56                           ; 
    57                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    58                           ;        of conditions and the following disclaimer in the documentation and/or other
    59                           ;        materials provided with the distribution.
    60                           ; 
    61                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    62                           ;        software without specific prior written permission.
    63                           ; 
    64                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    65                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    66                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    67                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    68                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    69                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    70                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    71                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    72                           ; 
    73                           ; 
    74                           ; Code-generator required, PIC18F25K22 Definitions
    75                           ; 
    76                           ; SFR Addresses
    77  0000                     
    78                           	psect	idataCOMRAM
    79  0011E8                     __pidataCOMRAM:
    80                           	opt stack 0
    81                           
    82                           ;initializer for _readDA
    83  0011E8  E9                 	db	233
    84                           
    85                           ;initializer for _analog_count
    86  0011E9  64                 	db	100
    87                           
    88                           ;initializer for _offset
    89  0011EA  1E                 	db	30
    90  0000                     _VREFCON0	set	3906
    91  0000                     _CCPR5H	set	3926
    92  0000                     _CCPR5L	set	3925
    93  0000                     _CCP5CON	set	3924
    94  0000                     _ANSELA	set	3896
    95  0000                     _ANSELB	set	3897
    96  0000                     _ANSELC	set	3898
    97  0000                     _LATBbits	set	3978
    98  0000                     _PORTBbits	set	3969
    99  0000                     _LATCbits	set	3979
   100  0000                     _LATAbits	set	3977
   101  0000                     _T0CONbits	set	4053
   102  0000                     _T0CON	set	4053
   103  0000                     _INTCONbits	set	4082
   104  0000                     _TMR0L	set	4054
   105  0000                     _TMR0H	set	4055
   106  0000                     _SSP1STATbits	set	4039
   107  0000                     _SSP1BUF	set	4041
   108  0000                     _SSP1CON1bits	set	4038
   109  0000                     _SSP1ADD	set	4040
   110  0000                     _SSP1CON1	set	4038
   111  0000                     _SSP1STAT	set	4039
   112  0000                     _TXREG1	set	4013
   113  0000                     _RCREG1	set	4014
   114  0000                     _RCSTA1bits	set	4011
   115  0000                     _PIR1bits	set	3998
   116  0000                     _SPBRGH1	set	4016
   117  0000                     _SPBRG1	set	4015
   118  0000                     _TXSTA1	set	4012
   119  0000                     _RCSTA1	set	4011
   120  0000                     _BAUDCON1	set	4024
   121  0000                     _ADCON0bits	set	4034
   122  0000                     _ADRESH	set	4036
   123  0000                     _ADRESL	set	4035
   124  0000                     _ADCON2	set	4032
   125  0000                     _ADCON1	set	4033
   126  0000                     _ADCON0	set	4034
   127  0000                     _INTCON2bits	set	4081
   128  0000                     _WPUB	set	3937
   129  0000                     _TRISC	set	3988
   130  0000                     _TRISB	set	3987
   131  0000                     _TRISA	set	3986
   132  0000                     _LATC	set	3979
   133  0000                     _LATB	set	3978
   134  0000                     _LATA	set	3977
   135  0000                     _OSCTUNE	set	3995
   136  0000                     _OSCCON2	set	4050
   137  0000                     _OSCCON	set	4051
   138  0000                     _PLLRDY	set	32407
   139                           
   140                           	psect	smallconst
   141  000600                     __psmallconst:
   142                           	opt stack 0
   143  000600  00                 	db	0
   144  000601                     STR_2:
   145  000601  4E                 	db	78	;'N'
   146  000602  00                 	db	0
   147  000603                     STR_1:
   148  000603  59                 	db	89	;'Y'
   149  000604  00                 	db	0
   150                           
   151                           ; #config settings
   152  000605  00                 	db	0	; dummy byte at the end
   153  0000                     
   154                           	psect	cinit
   155  000FDA                     __pcinit:
   156                           	opt stack 0
   157  000FDA                     start_initialization:
   158                           	opt stack 0
   159  000FDA                     __initialization:
   160                           	opt stack 0
   161                           
   162                           ; Initialize objects allocated to COMRAM (3 bytes)
   163                           ; load TBLPTR registers with __pidataCOMRAM
   164  000FDA  0EE8               	movlw	low __pidataCOMRAM
   165  000FDC  6EF6               	movwf	tblptrl,c
   166  000FDE  0E11               	movlw	high __pidataCOMRAM
   167  000FE0  6EF7               	movwf	tblptrh,c
   168  000FE2  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   169  000FE4  6EF8               	movwf	tblptru,c
   170  000FE6  0009               	tblrd		*+	;fetch initializer
   171  000FE8  CFF5 F05C          	movff	tablat,__pdataCOMRAM
   172  000FEC  0009               	tblrd		*+	;fetch initializer
   173  000FEE  CFF5 F05D          	movff	tablat,__pdataCOMRAM+1
   174  000FF2  0009               	tblrd		*+	;fetch initializer
   175  000FF4  CFF5 F05E          	movff	tablat,__pdataCOMRAM+2
   176                           
   177                           ; Clear objects allocated to BANK0 (2 bytes)
   178  000FF8  0100               	movlb	0
   179  000FFA  6B61               	clrf	(__pbssBANK0+1)& (0+255),b
   180  000FFC  6B60               	clrf	__pbssBANK0& (0+255),b
   181                           
   182                           ; Clear objects allocated to COMRAM (7 bytes)
   183  000FFE  EE00  F055         	lfsr	0,__pbssCOMRAM
   184  001002  0E07               	movlw	7
   185  001004                     clear_0:
   186  001004  6AEE               	clrf	postinc0,c
   187  001006  06E8               	decf	wreg,f,c
   188  001008  E1FD               	bnz	clear_0
   189  00100A                     end_of_initialization:
   190                           	opt stack 0
   191  00100A                     __end_of__initialization:
   192                           	opt stack 0
   193  00100A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   194  00100C  6EF8               	movwf	tblptru,c
   195  00100E  0100               	movlb	0
   196  001010  EF17  F005         	goto	_main	;jump to C main() function
   197                           tblptru	equ	0xFF8
   198                           tblptrh	equ	0xFF7
   199                           tblptrl	equ	0xFF6
   200                           tablat	equ	0xFF5
   201                           postinc0	equ	0xFEE
   202                           wreg	equ	0xFE8
   203                           
   204                           	psect	bssCOMRAM
   205  000055                     __pbssCOMRAM:
   206                           	opt stack 0
   207  000055                     _calm_state:
   208                           	opt stack 0
   209  000055                     	ds	4
   210  000059                     _timer0ReloadVal:
   211                           	opt stack 0
   212  000059                     	ds	2
   213  00005B                     _filtr:
   214                           	opt stack 0
   215  00005B                     	ds	1
   216                           tblptru	equ	0xFF8
   217                           tblptrh	equ	0xFF7
   218                           tblptrl	equ	0xFF6
   219                           tablat	equ	0xFF5
   220                           postinc0	equ	0xFEE
   221                           wreg	equ	0xFE8
   222                           
   223                           	psect	dataCOMRAM
   224  00005C                     __pdataCOMRAM:
   225                           	opt stack 0
   226  00005C                     _readDA:
   227                           	opt stack 0
   228  00005C                     	ds	1
   229  00005D                     _analog_count:
   230                           	opt stack 0
   231  00005D                     	ds	1
   232  00005E                     _offset:
   233                           	opt stack 0
   234  00005E                     	ds	1
   235                           tblptru	equ	0xFF8
   236                           tblptrh	equ	0xFF7
   237                           tblptrl	equ	0xFF6
   238                           tablat	equ	0xFF5
   239                           postinc0	equ	0xFEE
   240                           wreg	equ	0xFE8
   241                           
   242                           	psect	bssBANK0
   243  000060                     __pbssBANK0:
   244                           	opt stack 0
   245  000060                     _auto_offset:
   246                           	opt stack 0
   247  000060                     	ds	2
   248                           tblptru	equ	0xFF8
   249                           tblptrh	equ	0xFF7
   250                           tblptrl	equ	0xFF6
   251                           tablat	equ	0xFF5
   252                           postinc0	equ	0xFEE
   253                           wreg	equ	0xFE8
   254                           
   255                           	psect	cstackCOMRAM
   256  000001                     __pcstackCOMRAM:
   257                           	opt stack 0
   258  000001                     ??_TMR0_Initialize:
   259  000001                     ??_ProbeDelay:
   260  000001                     ?_ADC_GetConversion:
   261                           	opt stack 0
   262  000001                     ?_TMR0_ReadTimer:
   263                           	opt stack 0
   264  000001                     ?___awdiv:
   265                           	opt stack 0
   266  000001                     EUSART1_Write@txData:
   267                           	opt stack 0
   268  000001                     SPI1_Exchange8bit@data:
   269                           	opt stack 0
   270  000001                     TMR0_WriteTimer@timerVal:
   271                           	opt stack 0
   272  000001                     ___awdiv@dividend:
   273                           	opt stack 0
   274                           
   275                           ; 2 bytes @ 0x0
   276  000001                     	ds	1
   277  000002                     ProbeDelay@delay:
   278                           	opt stack 0
   279  000002                     DataSend@data:
   280                           	opt stack 0
   281  000002                     SendToSPI@table:
   282                           	opt stack 0
   283                           
   284                           ; 2 bytes @ 0x1
   285  000002                     	ds	1
   286  000003                     ??_ADC_GetConversion:
   287  000003                     ??_TMR0_ReadTimer:
   288  000003                     ProbeDelay@j:
   289                           	opt stack 0
   290  000003                     ___awdiv@divisor:
   291                           	opt stack 0
   292                           
   293                           ; 2 bytes @ 0x2
   294  000003                     	ds	1
   295  000004                     ??_SendToSPI:
   296  000004                     DataSend@sendL:
   297                           	opt stack 0
   298                           
   299                           ; 1 bytes @ 0x3
   300  000004                     	ds	1
   301  000005                     ADC_GetConversion@channel:
   302                           	opt stack 0
   303  000005                     DataSend@sendH:
   304                           	opt stack 0
   305  000005                     SendToSPI@total:
   306                           	opt stack 0
   307  000005                     ___awdiv@counter:
   308                           	opt stack 0
   309  000005                     TMR0_ReadTimer@readVal:
   310                           	opt stack 0
   311                           
   312                           ; 2 bytes @ 0x4
   313  000005                     	ds	1
   314  000006                     analog_send@analog:
   315                           	opt stack 0
   316  000006                     SendToSPI@set:
   317                           	opt stack 0
   318  000006                     ___awdiv@sign:
   319                           	opt stack 0
   320                           
   321                           ; 1 bytes @ 0x5
   322  000006                     	ds	1
   323  000007                     TMR0_ReadTimer@readValLow:
   324                           	opt stack 0
   325  000007                     SendToSPI@tmpL:
   326                           	opt stack 0
   327  000007                     analog_send@adc_result:
   328                           	opt stack 0
   329  000007                     ___awdiv@quotient:
   330                           	opt stack 0
   331                           
   332                           ; 2 bytes @ 0x6
   333  000007                     	ds	1
   334  000008                     TMR0_ReadTimer@readValHigh:
   335                           	opt stack 0
   336  000008                     SendToSPI@tmpH:
   337                           	opt stack 0
   338                           
   339                           ; 1 bytes @ 0x7
   340  000008                     	ds	1
   341  000009                     SendToSPI@value:
   342                           	opt stack 0
   343  000009                     MinMax@count:
   344                           	opt stack 0
   345  000009                     TimerTest@value:
   346                           	opt stack 0
   347                           
   348                           ; 2 bytes @ 0x8
   349  000009                     	ds	1
   350  00000A                     MinMax@min:
   351                           	opt stack 0
   352                           
   353                           ; 2 bytes @ 0x9
   354  00000A                     	ds	2
   355  00000C                     MinMax@max:
   356                           	opt stack 0
   357                           
   358                           ; 2 bytes @ 0xB
   359  00000C                     	ds	2
   360  00000E                     MinMax@prumer:
   361                           	opt stack 0
   362                           
   363                           ; 2 bytes @ 0xD
   364  00000E                     	ds	2
   365  000010                     ??_MinMax:
   366                           
   367                           ; 1 bytes @ 0xF
   368  000010                     	ds	3
   369  000013                     MinMax@analog:
   370                           	opt stack 0
   371                           
   372                           ; 1 bytes @ 0x12
   373  000013                     	ds	1
   374  000014                     MinMax@tmp:
   375                           	opt stack 0
   376                           
   377                           ; 2 bytes @ 0x13
   378  000014                     	ds	2
   379  000016                     MinMax@i:
   380                           	opt stack 0
   381                           
   382                           ; 2 bytes @ 0x15
   383  000016                     	ds	2
   384  000018                     MinMax@result:
   385                           	opt stack 0
   386                           
   387                           ; 2 bytes @ 0x17
   388  000018                     	ds	2
   389  00001A                     Calibrate@calib:
   390                           	opt stack 0
   391                           
   392                           ; 1 bytes @ 0x19
   393  00001A                     	ds	1
   394  00001B                     Calibrate@diff_1:
   395                           	opt stack 0
   396                           
   397                           ; 1 bytes @ 0x1A
   398  00001B                     	ds	1
   399  00001C                     Calibrate@diff_2:
   400                           	opt stack 0
   401                           
   402                           ; 1 bytes @ 0x1B
   403  00001C                     	ds	1
   404  00001D                     Calibrate@table:
   405                           	opt stack 0
   406                           
   407                           ; 2 bytes @ 0x1C
   408  00001D                     	ds	2
   409  00001F                     Calibrate@analog:
   410                           	opt stack 0
   411                           
   412                           ; 1 bytes @ 0x1E
   413  00001F                     	ds	1
   414  000020                     Calibrate@min:
   415                           	opt stack 0
   416                           
   417                           ; 2 bytes @ 0x1F
   418  000020                     	ds	2
   419  000022                     Calibrate@max:
   420                           	opt stack 0
   421                           
   422                           ; 2 bytes @ 0x21
   423  000022                     	ds	2
   424  000024                     Calibrate@prumer:
   425                           	opt stack 0
   426                           
   427                           ; 2 bytes @ 0x23
   428  000024                     	ds	2
   429  000026                     AutoSet@weld:
   430                           	opt stack 0
   431                           
   432                           ; 2 bytes @ 0x25
   433  000026                     	ds	2
   434  000028                     AutoSet@detect:
   435                           	opt stack 0
   436                           
   437                           ; 2 bytes @ 0x27
   438  000028                     	ds	2
   439  00002A                     ??_AutoSet:
   440                           
   441                           ; 1 bytes @ 0x29
   442  00002A                     	ds	4
   443  00002E                     AutoSet@min:
   444                           	opt stack 0
   445                           
   446                           ; 2 bytes @ 0x2D
   447  00002E                     	ds	2
   448  000030                     AutoSet@max:
   449                           	opt stack 0
   450                           
   451                           ; 2 bytes @ 0x2F
   452  000030                     	ds	2
   453  000032                     AutoSet@analog:
   454                           	opt stack 0
   455                           
   456                           ; 1 bytes @ 0x31
   457  000032                     	ds	1
   458  000033                     AutoSet@prumer:
   459                           	opt stack 0
   460                           
   461                           ; 2 bytes @ 0x32
   462  000033                     	ds	2
   463  000035                     NormalWork@weld_detect:
   464                           	opt stack 0
   465                           
   466                           ; 2 bytes @ 0x34
   467  000035                     	ds	2
   468  000037                     NormalWork@delay:
   469                           	opt stack 0
   470                           
   471                           ; 2 bytes @ 0x36
   472  000037                     	ds	2
   473  000039                     NormalWork@level_detect:
   474                           	opt stack 0
   475                           
   476                           ; 2 bytes @ 0x38
   477  000039                     	ds	2
   478  00003B                     
   479                           ; 1 bytes @ 0x3A
   480  00003B                     	ds	2
   481  00003D                     NormalWork@count_measure:
   482                           	opt stack 0
   483                           
   484                           ; 2 bytes @ 0x3C
   485  00003D                     	ds	2
   486  00003F                     NormalWork@count:
   487                           	opt stack 0
   488                           
   489                           ; 1 bytes @ 0x3E
   490  00003F                     	ds	1
   491  000040                     NormalWork@count_1130:
   492                           	opt stack 0
   493                           
   494                           ; 1 bytes @ 0x3F
   495  000040                     	ds	1
   496  000041                     NormalWork@weld:
   497                           	opt stack 0
   498                           
   499                           ; 1 bytes @ 0x40
   500  000041                     	ds	1
   501  000042                     NormalWork@analog:
   502                           	opt stack 0
   503                           
   504                           ; 1 bytes @ 0x41
   505  000042                     	ds	1
   506  000043                     NormalWork@result:
   507                           	opt stack 0
   508                           
   509                           ; 2 bytes @ 0x42
   510  000043                     	ds	2
   511  000045                     ??_main:
   512                           
   513                           ; 1 bytes @ 0x44
   514  000045                     	ds	2
   515  000047                     main@spiBuffer:
   516                           	opt stack 0
   517                           
   518                           ; 2 bytes @ 0x46
   519  000047                     	ds	2
   520  000049                     main@readH:
   521                           	opt stack 0
   522                           
   523                           ; 1 bytes @ 0x48
   524  000049                     	ds	1
   525  00004A                     main@readL:
   526                           	opt stack 0
   527                           
   528                           ; 1 bytes @ 0x49
   529  00004A                     	ds	1
   530  00004B                     main@level_detect:
   531                           	opt stack 0
   532                           
   533                           ; 4 bytes @ 0x4A
   534  00004B                     	ds	4
   535  00004F                     main@i:
   536                           	opt stack 0
   537                           
   538                           ; 1 bytes @ 0x4E
   539  00004F                     	ds	1
   540  000050                     main@weld_detect:
   541                           	opt stack 0
   542                           
   543                           ; 2 bytes @ 0x4F
   544  000050                     	ds	2
   545  000052                     main@command:
   546                           	opt stack 0
   547                           
   548                           ; 1 bytes @ 0x51
   549  000052                     	ds	1
   550  000053                     main@analog:
   551                           	opt stack 0
   552                           
   553                           ; 1 bytes @ 0x52
   554  000053                     	ds	1
   555  000054                     main@probe_delay:
   556                           	opt stack 0
   557                           
   558                           ; 1 bytes @ 0x53
   559  000054                     	ds	1
   560                           tblptru	equ	0xFF8
   561                           tblptrh	equ	0xFF7
   562                           tblptrl	equ	0xFF6
   563                           tablat	equ	0xFF5
   564                           postinc0	equ	0xFEE
   565                           wreg	equ	0xFE8
   566                           
   567 ;;
   568 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   569 ;;
   570 ;; *************** function _main *****************
   571 ;; Defined at:
   572 ;;		line 44 in file "main.c"
   573 ;; Parameters:    Size  Location     Type
   574 ;;		None
   575 ;; Auto vars:     Size  Location     Type
   576 ;;  i               1   78[COMRAM] unsigned char 
   577 ;;  level_detect    4   74[COMRAM] unsigned int [2]
   578 ;;  weld_detect     2   79[COMRAM] unsigned int 
   579 ;;  spiBuffer       2   70[COMRAM] unsigned char [2]
   580 ;;  adc_result      2    0        unsigned int 
   581 ;;  probe_delay     1   83[COMRAM] unsigned char 
   582 ;;  analog          1   82[COMRAM] enum E6697
   583 ;;  command         1   81[COMRAM] unsigned char 
   584 ;;  readL           1   73[COMRAM] unsigned char 
   585 ;;  readH           1   72[COMRAM] unsigned char 
   586 ;;  sendL           1    0        unsigned char 
   587 ;;  sendH           1    0        unsigned char 
   588 ;; Return value:  Size  Location     Type
   589 ;;                  1    wreg      void 
   590 ;; Registers used:
   591 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   592 ;; Tracked objects:
   593 ;;		On entry : 0/0
   594 ;;		On exit  : 0/0
   595 ;;		Unchanged: 0/0
   596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   597 ;;      Params:         0       0       0       0       0       0       0
   598 ;;      Locals:        14       0       0       0       0       0       0
   599 ;;      Temps:          2       0       0       0       0       0       0
   600 ;;      Totals:        16       0       0       0       0       0       0
   601 ;;Total ram usage:       16 bytes
   602 ;; Hardware stack levels required when called:    5
   603 ;; This function calls:
   604 ;;		_AutoSet
   605 ;;		_Calibrate
   606 ;;		_DataSend
   607 ;;		_EUSART1_Read
   608 ;;		_EUSART1_Write
   609 ;;		_NormalWork
   610 ;;		_ProbeDelay
   611 ;;		_SYSTEM_Initialize
   612 ;;		_SendToSPI
   613 ;;		_TimerTest
   614 ;;		_analog_send
   615 ;; This function is called by:
   616 ;;		Startup code after reset
   617 ;; This function uses a non-reentrant model
   618 ;;
   619                           
   620                           	psect	text0
   621  000A2E                     __ptext0:
   622                           	opt stack 0
   623  000A2E                     _main:
   624                           	opt stack 26
   625                           
   626                           ;main.c: 46: SYSTEM_Initialize();
   627                           
   628                           ;incstack = 0
   629  000A2E  EC84  F008         	call	_SYSTEM_Initialize	;wreg free
   630                           
   631                           ;main.c: 49: do { LATAbits.LATA4 = 1; } while(0);
   632  000A32  8889               	bsf	3977,4,c	;volatile
   633                           
   634                           ;main.c: 51: uint8_t probe_delay = 10;
   635  000A34  0E0A               	movlw	10
   636  000A36  6E54               	movwf	main@probe_delay,c
   637                           
   638                           ;main.c: 52: uint16_t weld_detect = 63;
   639  000A38  0E00               	movlw	0
   640  000A3A  6E51               	movwf	main@weld_detect+1,c
   641  000A3C  0E3F               	movlw	63
   642  000A3E  6E50               	movwf	main@weld_detect,c
   643                           
   644                           ;main.c: 53: uint16_t level_detect[2];
   645                           ;main.c: 56: uint16_t adc_result;
   646                           ;main.c: 57: uint8_t sendH;
   647                           ;main.c: 58: uint8_t sendL;
   648                           ;main.c: 59: uint8_t readL;
   649                           ;main.c: 60: uint8_t readH;
   650                           ;main.c: 61: uint8_t command;
   651                           ;main.c: 63: uint8_t spiBuffer[2];
   652                           ;main.c: 66: calm_state[0] = 0;
   653  000A40  0E00               	movlw	0
   654  000A42  6E56               	movwf	_calm_state+1,c
   655  000A44  0E00               	movlw	0
   656  000A46  6E55               	movwf	_calm_state,c
   657                           
   658                           ;main.c: 67: calm_state[1] = 0;
   659  000A48  0E00               	movlw	0
   660  000A4A  6E58               	movwf	_calm_state+3,c
   661  000A4C  0E00               	movlw	0
   662  000A4E  6E57               	movwf	_calm_state+2,c
   663  000A50                     l2059:
   664                           
   665                           ;main.c: 70: command = 0;
   666  000A50  0E00               	movlw	0
   667  000A52  6E52               	movwf	main@command,c
   668  000A54                     
   669                           ;main.c: 75: if (PIR1bits.RC1IF == 1){
   670  000A54  AA9E               	btfss	3998,5,c	;volatile
   671  000A56  D0BE               	goto	l286
   672                           
   673                           ;main.c: 76: command = EUSART1_Read();
   674  000A58  ECD0  F008         	call	_EUSART1_Read	;wreg free
   675  000A5C  6E52               	movwf	main@command,c
   676                           
   677                           ;main.c: 77: }
   678                           ;main.c: 80: uint8_t i;
   679                           ;main.c: 82: switch(command){
   680  000A5E  D0BA               	goto	l286
   681  000A60                     
   682                           ;main.c: 85: analog = sonda_out;
   683  000A60  0E00               	movlw	0
   684  000A62  6E53               	movwf	main@analog,c
   685                           
   686                           ;main.c: 86: for(i = 0; i <= analog_count; i++){
   687  000A64  0E00               	movlw	0
   688  000A66  6E4F               	movwf	main@i,c
   689  000A68  D007               	goto	l288
   690  000A6A                     
   691                           ;main.c: 87: analog_send(analog);
   692  000A6A  5053               	movf	main@analog,w,c
   693  000A6C  EC22  F008         	call	_analog_send
   694                           
   695                           ;main.c: 88: ProbeDelay(probe_delay);
   696  000A70  5054               	movf	main@probe_delay,w,c
   697  000A72  EC63  F008         	call	_ProbeDelay
   698  000A76  2A4F               	incf	main@i,f,c
   699  000A78                     l288:
   700  000A78  504F               	movf	main@i,w,c
   701  000A7A  5C5D               	subwf	_analog_count,w,c
   702  000A7C  B0D8               	btfsc	status,0,c
   703  000A7E  D7F5               	goto	l289
   704  000A80  D7E7               	goto	l2059
   705  000A82                     
   706                           ;main.c: 94: analog = op_out;
   707  000A82  0E01               	movlw	1
   708  000A84  6E53               	movwf	main@analog,c
   709                           
   710                           ;main.c: 95: for(i = 0; i <= analog_count; i++){
   711  000A86  0E00               	movlw	0
   712  000A88  6E4F               	movwf	main@i,c
   713  000A8A  D007               	goto	l293
   714  000A8C                     
   715                           ;main.c: 96: analog_send(analog);
   716  000A8C  5053               	movf	main@analog,w,c
   717  000A8E  EC22  F008         	call	_analog_send
   718                           
   719                           ;main.c: 97: ProbeDelay(probe_delay);
   720  000A92  5054               	movf	main@probe_delay,w,c
   721  000A94  EC63  F008         	call	_ProbeDelay
   722  000A98  2A4F               	incf	main@i,f,c
   723  000A9A                     l293:
   724  000A9A  504F               	movf	main@i,w,c
   725  000A9C  5C5D               	subwf	_analog_count,w,c
   726  000A9E  B0D8               	btfsc	status,0,c
   727  000AA0  D7F5               	goto	l294
   728  000AA2  D7D6               	goto	l2059
   729  000AA4                     
   730                           ;main.c: 103: do { LATCbits.LATC2 = 0; } while(0);
   731  000AA4  948B               	bcf	3979,2,c	;volatile
   732                           
   733                           ;main.c: 104: readDA = EUSART1_Read();
   734  000AA6  ECD0  F008         	call	_EUSART1_Read	;wreg free
   735  000AAA  6E5C               	movwf	_readDA,c
   736                           
   737                           ;main.c: 105: SendToSPI(readDA, &spiBuffer);
   738  000AAC  0E47               	movlw	low main@spiBuffer
   739  000AAE  6E02               	movwf	SendToSPI@table,c
   740  000AB0  0E00               	movlw	high main@spiBuffer
   741  000AB2  6E03               	movwf	SendToSPI@table+1,c
   742  000AB4  505C               	movf	_readDA,w,c
   743  000AB6  ECB7  F007         	call	_SendToSPI
   744                           
   745                           ;main.c: 106: do { LATCbits.LATC2 = 1; } while(0);
   746  000ABA  848B               	bsf	3979,2,c	;volatile
   747  000ABC  D7C9               	goto	l2059
   748  000ABE                     
   749                           ;main.c: 114: analog = op_out;
   750  000ABE  0E01               	movlw	1
   751  000AC0  6E53               	movwf	main@analog,c
   752  000AC2                     
   753                           ;main.c: 117: if (PIR1bits.RC1IF == 1){
   754  000AC2  BA9E               	btfsc	3998,5,c	;volatile
   755  000AC4  D7C5               	goto	l2059
   756                           
   757                           ;main.c: 119: }
   758                           ;main.c: 120: analog_send(analog);
   759                           
   760                           ;main.c: 118: break;
   761  000AC6  5053               	movf	main@analog,w,c
   762  000AC8  EC22  F008         	call	_analog_send
   763                           
   764                           ;main.c: 121: ProbeDelay(probe_delay);
   765  000ACC  5054               	movf	main@probe_delay,w,c
   766  000ACE  EC63  F008         	call	_ProbeDelay
   767                           
   768                           ;main.c: 122: }
   769  000AD2  D7F7               	goto	l302
   770  000AD4                     
   771                           ;main.c: 130: analog = sonda_out;
   772  000AD4  0E00               	movlw	0
   773  000AD6  6E53               	movwf	main@analog,c
   774  000AD8                     
   775                           ;main.c: 133: if (PIR1bits.RC1IF == 1){
   776  000AD8  BA9E               	btfsc	3998,5,c	;volatile
   777  000ADA  D7BA               	goto	l2059
   778                           
   779                           ;main.c: 135: }
   780                           ;main.c: 136: analog_send(analog);
   781                           
   782                           ;main.c: 134: break;
   783  000ADC  5053               	movf	main@analog,w,c
   784  000ADE  EC22  F008         	call	_analog_send
   785                           
   786                           ;main.c: 137: ProbeDelay(probe_delay);
   787  000AE2  5054               	movf	main@probe_delay,w,c
   788  000AE4  EC63  F008         	call	_ProbeDelay
   789                           
   790                           ;main.c: 138: }
   791  000AE8  D7F7               	goto	l306
   792  000AEA                     
   793                           ;main.c: 146: analog = op_out;
   794  000AEA  0E01               	movlw	1
   795  000AEC  6E53               	movwf	main@analog,c
   796                           
   797                           ;main.c: 147: NormalWork(&weld_detect, &probe_delay, level_detect);
   798  000AEE  0E50               	movlw	low main@weld_detect
   799  000AF0  6E35               	movwf	NormalWork@weld_detect,c
   800  000AF2  0E00               	movlw	high main@weld_detect
   801  000AF4  6E36               	movwf	NormalWork@weld_detect+1,c
   802  000AF6  0E54               	movlw	low main@probe_delay
   803  000AF8  6E37               	movwf	NormalWork@delay,c
   804  000AFA  0E00               	movlw	high main@probe_delay
   805  000AFC  6E38               	movwf	NormalWork@delay+1,c
   806  000AFE  0E4B               	movlw	low main@level_detect
   807  000B00  6E39               	movwf	NormalWork@level_detect,c
   808  000B02  0E00               	movlw	high main@level_detect
   809  000B04  6E3A               	movwf	NormalWork@level_detect+1,c
   810  000B06  EC03  F003         	call	_NormalWork	;wreg free
   811  000B0A  D7A2               	goto	l2059
   812  000B0C                     
   813                           ;main.c: 154: analog = op_out;
   814  000B0C  0E01               	movlw	1
   815  000B0E  6E53               	movwf	main@analog,c
   816                           
   817                           ;main.c: 155: AutoSet(analog, &weld_detect, level_detect);
   818  000B10  0E50               	movlw	low main@weld_detect
   819  000B12  6E26               	movwf	AutoSet@weld,c
   820  000B14  0E00               	movlw	high main@weld_detect
   821  000B16  6E27               	movwf	AutoSet@weld+1,c
   822  000B18  0E4B               	movlw	low main@level_detect
   823  000B1A  6E28               	movwf	AutoSet@detect,c
   824  000B1C  0E00               	movlw	high main@level_detect
   825  000B1E  6E29               	movwf	AutoSet@detect+1,c
   826  000B20  5053               	movf	main@analog,w,c
   827  000B22  EC9D  F006         	call	_AutoSet
   828                           
   829                           ;main.c: 156: DataSend(level_detect[0]);
   830  000B26  C04B  F002         	movff	main@level_detect,DataSend@data
   831  000B2A  C04C  F003         	movff	main@level_detect+1,DataSend@data+1
   832  000B2E  ECAC  F008         	call	_DataSend	;wreg free
   833                           
   834                           ;main.c: 157: DataSend(level_detect[1]);
   835  000B32  C04D  F002         	movff	main@level_detect+2,DataSend@data
   836  000B36  C04E  F003         	movff	main@level_detect+3,DataSend@data+1
   837  000B3A  ECAC  F008         	call	_DataSend	;wreg free
   838  000B3E  D788               	goto	l2059
   839  000B40                     
   840                           ;main.c: 163: analog = op_out;
   841  000B40  0E01               	movlw	1
   842  000B42  6E53               	movwf	main@analog,c
   843                           
   844                           ;main.c: 164: Calibrate(analog);
   845  000B44  5053               	movf	main@analog,w,c
   846  000B46  EC10  F004         	call	_Calibrate
   847  000B4A  D782               	goto	l2059
   848  000B4C                     
   849                           ;main.c: 173: probe_delay = EUSART1_Read();
   850  000B4C  ECD0  F008         	call	_EUSART1_Read	;wreg free
   851  000B50  6E54               	movwf	main@probe_delay,c
   852                           
   853                           ;main.c: 174: offset = EUSART1_Read();
   854  000B52  ECD0  F008         	call	_EUSART1_Read	;wreg free
   855  000B56  6E5E               	movwf	_offset,c
   856                           
   857                           ;main.c: 175: analog_count = EUSART1_Read();
   858  000B58  ECD0  F008         	call	_EUSART1_Read	;wreg free
   859  000B5C  6E5D               	movwf	_analog_count,c
   860                           
   861                           ;main.c: 176: readL = EUSART1_Read();
   862  000B5E  ECD0  F008         	call	_EUSART1_Read	;wreg free
   863  000B62  6E4A               	movwf	main@readL,c
   864                           
   865                           ;main.c: 177: readH = EUSART1_Read();
   866  000B64  ECD0  F008         	call	_EUSART1_Read	;wreg free
   867  000B68  6E49               	movwf	main@readH,c
   868                           
   869                           ;main.c: 178: weld_detect = (readH << 8) + readL;
   870  000B6A  5049               	movf	main@readH,w,c
   871  000B6C  6E46               	movwf	(??_main+1)& (0+255),c
   872  000B6E  6A45               	clrf	??_main& (0+255),c
   873  000B70  504A               	movf	main@readL,w,c
   874  000B72  2445               	addwf	??_main,w,c
   875  000B74  6E50               	movwf	main@weld_detect,c
   876  000B76  0E00               	movlw	0
   877  000B78  2046               	addwfc	??_main+1,w,c
   878  000B7A  6E51               	movwf	main@weld_detect+1,c
   879                           
   880                           ;main.c: 180: readL = EUSART1_Read();
   881  000B7C  ECD0  F008         	call	_EUSART1_Read	;wreg free
   882  000B80  6E4A               	movwf	main@readL,c
   883                           
   884                           ;main.c: 181: if (readL == 'Y'){
   885  000B82  0E59               	movlw	89
   886  000B84  184A               	xorwf	main@readL,w,c
   887  000B86  A4D8               	btfss	status,2,c
   888  000B88  D002               	goto	l313
   889                           
   890                           ;main.c: 182: filtr = 1;
   891  000B8A  0E01               	movlw	1
   892  000B8C  D001               	goto	L1
   893  000B8E                     l313:
   894  000B8E  0E00               	movlw	0
   895  000B90                     L1:
   896  000B90  6E5B               	movwf	_filtr,c
   897  000B92  D75E               	goto	l2059
   898  000B94                     
   899                           ;main.c: 193: EUSART1_Write(probe_delay);
   900  000B94  5054               	movf	main@probe_delay,w,c
   901  000B96  ECE5  F008         	call	_EUSART1_Write
   902                           
   903                           ;main.c: 194: EUSART1_Write(offset);
   904  000B9A  505E               	movf	_offset,w,c
   905  000B9C  ECE5  F008         	call	_EUSART1_Write
   906                           
   907                           ;main.c: 195: EUSART1_Write(analog_count);
   908  000BA0  505D               	movf	_analog_count,w,c
   909  000BA2  ECE5  F008         	call	_EUSART1_Write
   910                           
   911                           ;main.c: 196: DataSend(weld_detect);
   912  000BA6  C050  F002         	movff	main@weld_detect,DataSend@data
   913  000BAA  C051  F003         	movff	main@weld_detect+1,DataSend@data+1
   914  000BAE  ECAC  F008         	call	_DataSend	;wreg free
   915                           
   916                           ;main.c: 197: EUSART1_Write(readDA);
   917  000BB2  505C               	movf	_readDA,w,c
   918  000BB4  ECE5  F008         	call	_EUSART1_Write
   919                           
   920                           ;main.c: 198: if (filtr){
   921  000BB8  505B               	movf	_filtr,w,c
   922  000BBA  B4D8               	btfsc	status,2,c
   923  000BBC  D004               	goto	l316
   924                           
   925                           ;main.c: 199: EUSART1_Write("Y");
   926  000BBE  0E03               	movlw	STR_1& (0+255)
   927  000BC0  ECE5  F008         	call	_EUSART1_Write
   928                           
   929                           ;main.c: 200: }else EUSART1_Write("N");
   930  000BC4  D745               	goto	l2059
   931  000BC6                     l316:
   932  000BC6  0E01               	movlw	STR_2& (0+255)
   933  000BC8  ECE5  F008         	call	_EUSART1_Write
   934  000BCC  D741               	goto	l2059
   935  000BCE                     
   936                           ;main.c: 206: TimerTest();
   937  000BCE  EC2B  F007         	call	_TimerTest	;wreg free
   938  000BD2  D73E               	goto	l2059
   939  000BD4                     l286:
   940  000BD4  5052               	movf	main@command,w,c
   941                           
   942                           ; Switch size 1, requested type "space"
   943                           ; Number of cases is 11, Range of values is 1 to 11
   944                           ; switch strategies available:
   945                           ; Name         Instructions Cycles
   946                           ; simple_byte           34    18 (average)
   947                           ;	Chosen strategy is simple_byte
   948  000BD6  0A01               	xorlw	1	; case 1
   949  000BD8  B4D8               	btfsc	status,2,c
   950  000BDA  D742               	goto	l287
   951  000BDC  0A03               	xorlw	3	; case 2
   952  000BDE  B4D8               	btfsc	status,2,c
   953  000BE0  D750               	goto	l292
   954  000BE2  0A01               	xorlw	1	; case 3
   955  000BE4  B4D8               	btfsc	status,2,c
   956  000BE6  D75E               	goto	l296
   957  000BE8  0A07               	xorlw	7	; case 4
   958  000BEA  B4D8               	btfsc	status,2,c
   959  000BEC  D768               	goto	l301
   960  000BEE  0A01               	xorlw	1	; case 5
   961  000BF0  B4D8               	btfsc	status,2,c
   962  000BF2  D770               	goto	l305
   963  000BF4  0A03               	xorlw	3	; case 6
   964  000BF6  B4D8               	btfsc	status,2,c
   965  000BF8  D778               	goto	l309
   966  000BFA  0A01               	xorlw	1	; case 7
   967  000BFC  B4D8               	btfsc	status,2,c
   968  000BFE  D786               	goto	l310
   969  000C00  0A0F               	xorlw	15	; case 8
   970  000C02  B4D8               	btfsc	status,2,c
   971  000C04  D79D               	goto	l311
   972  000C06  0A01               	xorlw	1	; case 9
   973  000C08  B4D8               	btfsc	status,2,c
   974  000C0A  D7A0               	goto	l312
   975  000C0C  0A03               	xorlw	3	; case 10
   976  000C0E  B4D8               	btfsc	status,2,c
   977  000C10  D7C1               	goto	l315
   978  000C12  0A01               	xorlw	1	; case 11
   979  000C14  B4D8               	btfsc	status,2,c
   980  000C16  D7DB               	goto	l318
   981  000C18  D71D               	goto	l284
   982  000C1A                     __end_of_main:
   983                           	opt stack 0
   984                           tblptru	equ	0xFF8
   985                           tblptrh	equ	0xFF7
   986                           tblptrl	equ	0xFF6
   987                           tablat	equ	0xFF5
   988                           postinc0	equ	0xFEE
   989                           wreg	equ	0xFE8
   990                           status	equ	0xFD8
   991                           
   992 ;; *************** function _analog_send *****************
   993 ;; Defined at:
   994 ;;		line 217 in file "main.c"
   995 ;; Parameters:    Size  Location     Type
   996 ;;  analog          1    wreg     enum E6697
   997 ;; Auto vars:     Size  Location     Type
   998 ;;  analog          1    5[COMRAM] enum E6697
   999 ;;  adc_result      2    6[COMRAM] unsigned int 
  1000 ;;  sendL           1    0        unsigned char 
  1001 ;;  sendH           1    0        unsigned char 
  1002 ;; Return value:  Size  Location     Type
  1003 ;;                  1    wreg      void 
  1004 ;; Registers used:
  1005 ;;		wreg, status,2, status,0, cstack
  1006 ;; Tracked objects:
  1007 ;;		On entry : 0/0
  1008 ;;		On exit  : 0/0
  1009 ;;		Unchanged: 0/0
  1010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1011 ;;      Params:         0       0       0       0       0       0       0
  1012 ;;      Locals:         3       0       0       0       0       0       0
  1013 ;;      Temps:          0       0       0       0       0       0       0
  1014 ;;      Totals:         3       0       0       0       0       0       0
  1015 ;;Total ram usage:        3 bytes
  1016 ;; Hardware stack levels used:    1
  1017 ;; Hardware stack levels required when called:    2
  1018 ;; This function calls:
  1019 ;;		_ADC_GetConversion
  1020 ;;		_DataSend
  1021 ;; This function is called by:
  1022 ;;		_main
  1023 ;; This function uses a non-reentrant model
  1024 ;;
  1025                           
  1026                           	psect	text1
  1027  001044                     __ptext1:
  1028                           	opt stack 0
  1029  001044                     _analog_send:
  1030                           	opt stack 28
  1031                           
  1032                           ;incstack = 0
  1033                           ;analog_send@analog stored from wreg
  1034  001044  6E06               	movwf	analog_send@analog,c
  1035                           
  1036                           ;main.c: 223: uint16_t adc_result;
  1037                           ;main.c: 224: uint8_t sendH;
  1038                           ;main.c: 225: uint8_t sendL;
  1039                           ;main.c: 226: adc_result = 0;
  1040  001046  0E00               	movlw	0
  1041  001048  6E08               	movwf	analog_send@adc_result+1,c
  1042  00104A  0E00               	movlw	0
  1043  00104C  6E07               	movwf	analog_send@adc_result,c
  1044                           
  1045                           ;main.c: 227: adc_result = ADC_GetConversion(analog);
  1046  00104E  5006               	movf	analog_send@analog,w,c
  1047  001050  EC0A  F008         	call	_ADC_GetConversion
  1048  001054  C001  F007         	movff	?_ADC_GetConversion,analog_send@adc_result
  1049  001058  C002  F008         	movff	?_ADC_GetConversion+1,analog_send@adc_result+1
  1050                           
  1051                           ;main.c: 228: _delay((unsigned long)((25)*(64000000/4000000.0)));
  1052  00105C  0E85               	movlw	133
  1053  00105E                     u1227:
  1054  00105E  2EE8               	decfsz	wreg,f,c
  1055  001060  D7FE               	bra	u1227
  1056  001062  F000               	nop	
  1057                           
  1058                           ;main.c: 229: DataSend(adc_result);
  1059  001064  C007  F002         	movff	analog_send@adc_result,DataSend@data
  1060  001068  C008  F003         	movff	analog_send@adc_result+1,DataSend@data+1
  1061  00106C  ECAC  F008         	call	_DataSend	;wreg free
  1062  001070  0012               	return		;funcret
  1063  001072                     __end_of_analog_send:
  1064                           	opt stack 0
  1065                           tblptru	equ	0xFF8
  1066                           tblptrh	equ	0xFF7
  1067                           tblptrl	equ	0xFF6
  1068                           tablat	equ	0xFF5
  1069                           postinc0	equ	0xFEE
  1070                           wreg	equ	0xFE8
  1071                           status	equ	0xFD8
  1072                           
  1073 ;; *************** function _TimerTest *****************
  1074 ;; Defined at:
  1075 ;;		line 504 in file "main.c"
  1076 ;; Parameters:    Size  Location     Type
  1077 ;;		None
  1078 ;; Auto vars:     Size  Location     Type
  1079 ;;  value           2    8[COMRAM] unsigned int 
  1080 ;; Return value:  Size  Location     Type
  1081 ;;                  1    wreg      void 
  1082 ;; Registers used:
  1083 ;;		wreg, status,2, status,0, cstack
  1084 ;; Tracked objects:
  1085 ;;		On entry : 0/0
  1086 ;;		On exit  : 0/0
  1087 ;;		Unchanged: 0/0
  1088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1089 ;;      Params:         0       0       0       0       0       0       0
  1090 ;;      Locals:         2       0       0       0       0       0       0
  1091 ;;      Temps:          0       0       0       0       0       0       0
  1092 ;;      Totals:         2       0       0       0       0       0       0
  1093 ;;Total ram usage:        2 bytes
  1094 ;; Hardware stack levels used:    1
  1095 ;; Hardware stack levels required when called:    1
  1096 ;; This function calls:
  1097 ;;		_ProbeDelay
  1098 ;;		_TMR0_HasOverflowOccured
  1099 ;;		_TMR0_ReadTimer
  1100 ;;		_TMR0_StartTimer
  1101 ;;		_TMR0_StopTimer
  1102 ;;		_TMR0_WriteTimer
  1103 ;; This function is called by:
  1104 ;;		_main
  1105 ;; This function uses a non-reentrant model
  1106 ;;
  1107                           
  1108                           	psect	text2
  1109  000E56                     __ptext2:
  1110                           	opt stack 0
  1111  000E56                     _TimerTest:
  1112                           	opt stack 29
  1113                           
  1114                           ;main.c: 506: uint16_t value;
  1115                           ;main.c: 507: value = 3035;
  1116                           
  1117                           ;incstack = 0
  1118  000E56  0E0B               	movlw	11
  1119  000E58  6E0A               	movwf	TimerTest@value+1,c
  1120  000E5A  0EDB               	movlw	219
  1121  000E5C  6E09               	movwf	TimerTest@value,c
  1122                           
  1123                           ;main.c: 508: TMR0_WriteTimer(value);
  1124  000E5E  C009  F001         	movff	TimerTest@value,TMR0_WriteTimer@timerVal
  1125  000E62  C00A  F002         	movff	TimerTest@value+1,TMR0_WriteTimer@timerVal+1
  1126  000E66  ECEB  F008         	call	_TMR0_WriteTimer	;wreg free
  1127                           
  1128                           ;main.c: 509: do { LATBbits.LATB5 = 1; } while(0);
  1129  000E6A  8A8A               	bsf	3978,5,c	;volatile
  1130                           
  1131                           ;main.c: 510: TMR0_StartTimer();
  1132  000E6C  ECF2  F008         	call	_TMR0_StartTimer	;wreg free
  1133                           
  1134                           ;main.c: 511: while(TMR0_ReadTimer()){
  1135  000E70  D008               	goto	l433
  1136  000E72                     
  1137                           ;main.c: 512: ProbeDelay(50);
  1138  000E72  0E32               	movlw	50
  1139  000E74  EC63  F008         	call	_ProbeDelay
  1140                           
  1141                           ;main.c: 513: if (TMR0_HasOverflowOccured()) break;
  1142  000E78  ECDF  F008         	call	_TMR0_HasOverflowOccured	;wreg free
  1143  000E7C  0900               	iorlw	0
  1144  000E7E  A4D8               	btfss	status,2,c
  1145  000E80  D006               	goto	u1120
  1146  000E82                     l433:
  1147  000E82  EC75  F008         	call	_TMR0_ReadTimer	;wreg free
  1148  000E86  5001               	movf	?_TMR0_ReadTimer,w,c
  1149  000E88  1002               	iorwf	?_TMR0_ReadTimer+1,w,c
  1150  000E8A  A4D8               	btfss	status,2,c
  1151  000E8C  D7F2               	goto	l432
  1152  000E8E                     u1120:
  1153                           
  1154                           ;main.c: 514: }
  1155                           ;main.c: 515: TMR0_StopTimer();
  1156  000E8E  ECF0  F008         	call	_TMR0_StopTimer	;wreg free
  1157                           
  1158                           ;main.c: 516: do { LATBbits.LATB5 = 0; } while(0);
  1159  000E92  9A8A               	bcf	3978,5,c	;volatile
  1160                           
  1161                           ;main.c: 517: value = 34285;
  1162  000E94  0E85               	movlw	133
  1163  000E96  6E0A               	movwf	TimerTest@value+1,c
  1164  000E98  0EED               	movlw	237
  1165  000E9A  6E09               	movwf	TimerTest@value,c
  1166                           
  1167                           ;main.c: 518: TMR0_WriteTimer(value);
  1168  000E9C  C009  F001         	movff	TimerTest@value,TMR0_WriteTimer@timerVal
  1169  000EA0  C00A  F002         	movff	TimerTest@value+1,TMR0_WriteTimer@timerVal+1
  1170  000EA4  ECEB  F008         	call	_TMR0_WriteTimer	;wreg free
  1171                           
  1172                           ;main.c: 519: TMR0_StartTimer();
  1173  000EA8  ECF2  F008         	call	_TMR0_StartTimer	;wreg free
  1174  000EAC  EC75  F008         	call	_TMR0_ReadTimer	;wreg free
  1175  000EB0  5001               	movf	?_TMR0_ReadTimer,w,c
  1176  000EB2  1002               	iorwf	?_TMR0_ReadTimer+1,w,c
  1177  000EB4  A4D8               	btfss	status,2,c
  1178  000EB6  D7FA               	goto	l438
  1179                           
  1180                           ;main.c: 522: }
  1181                           ;main.c: 523: TMR0_StopTimer();
  1182  000EB8  ECF0  F008         	call	_TMR0_StopTimer	;wreg free
  1183                           
  1184                           ;main.c: 524: do { LATBbits.LATB5 = 1; } while(0);
  1185  000EBC  8A8A               	bsf	3978,5,c	;volatile
  1186                           
  1187                           ;main.c: 525: value = 34285;
  1188  000EBE  0E85               	movlw	133
  1189  000EC0  6E0A               	movwf	TimerTest@value+1,c
  1190  000EC2  0EED               	movlw	237
  1191  000EC4  6E09               	movwf	TimerTest@value,c
  1192                           
  1193                           ;main.c: 526: TMR0_WriteTimer(value);
  1194  000EC6  C009  F001         	movff	TimerTest@value,TMR0_WriteTimer@timerVal
  1195  000ECA  C00A  F002         	movff	TimerTest@value+1,TMR0_WriteTimer@timerVal+1
  1196  000ECE  ECEB  F008         	call	_TMR0_WriteTimer	;wreg free
  1197                           
  1198                           ;main.c: 527: TMR0_StartTimer();
  1199  000ED2  ECF2  F008         	call	_TMR0_StartTimer	;wreg free
  1200  000ED6  EC75  F008         	call	_TMR0_ReadTimer	;wreg free
  1201  000EDA  5001               	movf	?_TMR0_ReadTimer,w,c
  1202  000EDC  1002               	iorwf	?_TMR0_ReadTimer+1,w,c
  1203  000EDE  A4D8               	btfss	status,2,c
  1204  000EE0  D7FA               	goto	l443
  1205                           
  1206                           ;main.c: 530: }
  1207                           ;main.c: 531: TMR0_StopTimer();
  1208  000EE2  ECF0  F008         	call	_TMR0_StopTimer	;wreg free
  1209                           
  1210                           ;main.c: 532: do { LATBbits.LATB5 = 0; } while(0);
  1211  000EE6  9A8A               	bcf	3978,5,c	;volatile
  1212  000EE8  0012               	return	
  1213  000EEA                     __end_of_TimerTest:
  1214                           	opt stack 0
  1215                           tblptru	equ	0xFF8
  1216                           tblptrh	equ	0xFF7
  1217                           tblptrl	equ	0xFF6
  1218                           tablat	equ	0xFF5
  1219                           postinc0	equ	0xFEE
  1220                           wreg	equ	0xFE8
  1221                           status	equ	0xFD8
  1222                           
  1223 ;; *************** function _TMR0_WriteTimer *****************
  1224 ;; Defined at:
  1225 ;;		line 111 in file "mcc_generated_files/tmr0.c"
  1226 ;; Parameters:    Size  Location     Type
  1227 ;;  timerVal        2    0[COMRAM] unsigned int 
  1228 ;; Auto vars:     Size  Location     Type
  1229 ;;		None
  1230 ;; Return value:  Size  Location     Type
  1231 ;;                  1    wreg      void 
  1232 ;; Registers used:
  1233 ;;		wreg, status,2
  1234 ;; Tracked objects:
  1235 ;;		On entry : 0/0
  1236 ;;		On exit  : 0/0
  1237 ;;		Unchanged: 0/0
  1238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1239 ;;      Params:         2       0       0       0       0       0       0
  1240 ;;      Locals:         0       0       0       0       0       0       0
  1241 ;;      Temps:          0       0       0       0       0       0       0
  1242 ;;      Totals:         2       0       0       0       0       0       0
  1243 ;;Total ram usage:        2 bytes
  1244 ;; Hardware stack levels used:    1
  1245 ;; This function calls:
  1246 ;;		Nothing
  1247 ;; This function is called by:
  1248 ;;		_TimerTest
  1249 ;; This function uses a non-reentrant model
  1250 ;;
  1251                           
  1252                           	psect	text3
  1253  0011D6                     __ptext3:
  1254                           	opt stack 0
  1255  0011D6                     _TMR0_WriteTimer:
  1256                           	opt stack 29
  1257                           
  1258                           ;tmr0.c: 114: TMR0H = timerVal >> 8;
  1259                           
  1260                           ;incstack = 0
  1261  0011D6  5002               	movf	TMR0_WriteTimer@timerVal+1,w,c
  1262  0011D8  6ED7               	movwf	4055,c	;volatile
  1263                           
  1264                           ;tmr0.c: 115: TMR0L = (uint8_t) timerVal;
  1265  0011DA  C001  FFD6         	movff	TMR0_WriteTimer@timerVal,4054	;volatile
  1266  0011DE  0012               	return		;funcret
  1267  0011E0                     __end_of_TMR0_WriteTimer:
  1268                           	opt stack 0
  1269                           tblptru	equ	0xFF8
  1270                           tblptrh	equ	0xFF7
  1271                           tblptrl	equ	0xFF6
  1272                           tablat	equ	0xFF5
  1273                           postinc0	equ	0xFEE
  1274                           wreg	equ	0xFE8
  1275                           status	equ	0xFD8
  1276                           
  1277 ;; *************** function _TMR0_StopTimer *****************
  1278 ;; Defined at:
  1279 ;;		line 92 in file "mcc_generated_files/tmr0.c"
  1280 ;; Parameters:    Size  Location     Type
  1281 ;;		None
  1282 ;; Auto vars:     Size  Location     Type
  1283 ;;		None
  1284 ;; Return value:  Size  Location     Type
  1285 ;;                  1    wreg      void 
  1286 ;; Registers used:
  1287 ;;		None
  1288 ;; Tracked objects:
  1289 ;;		On entry : 0/0
  1290 ;;		On exit  : 0/0
  1291 ;;		Unchanged: 0/0
  1292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1293 ;;      Params:         0       0       0       0       0       0       0
  1294 ;;      Locals:         0       0       0       0       0       0       0
  1295 ;;      Temps:          0       0       0       0       0       0       0
  1296 ;;      Totals:         0       0       0       0       0       0       0
  1297 ;;Total ram usage:        0 bytes
  1298 ;; Hardware stack levels used:    1
  1299 ;; This function calls:
  1300 ;;		Nothing
  1301 ;; This function is called by:
  1302 ;;		_TimerTest
  1303 ;; This function uses a non-reentrant model
  1304 ;;
  1305                           
  1306                           	psect	text4
  1307  0011E0                     __ptext4:
  1308                           	opt stack 0
  1309  0011E0                     _TMR0_StopTimer:
  1310                           	opt stack 29
  1311                           
  1312                           ;tmr0.c: 95: T0CONbits.TMR0ON = 0;
  1313                           
  1314                           ;incstack = 0
  1315  0011E0  9ED5               	bcf	4053,7,c	;volatile
  1316  0011E2  0012               	return		;funcret
  1317  0011E4                     __end_of_TMR0_StopTimer:
  1318                           	opt stack 0
  1319                           tblptru	equ	0xFF8
  1320                           tblptrh	equ	0xFF7
  1321                           tblptrl	equ	0xFF6
  1322                           tablat	equ	0xFF5
  1323                           postinc0	equ	0xFEE
  1324                           wreg	equ	0xFE8
  1325                           status	equ	0xFD8
  1326                           
  1327 ;; *************** function _TMR0_StartTimer *****************
  1328 ;; Defined at:
  1329 ;;		line 86 in file "mcc_generated_files/tmr0.c"
  1330 ;; Parameters:    Size  Location     Type
  1331 ;;		None
  1332 ;; Auto vars:     Size  Location     Type
  1333 ;;		None
  1334 ;; Return value:  Size  Location     Type
  1335 ;;                  1    wreg      void 
  1336 ;; Registers used:
  1337 ;;		None
  1338 ;; Tracked objects:
  1339 ;;		On entry : 0/0
  1340 ;;		On exit  : 0/0
  1341 ;;		Unchanged: 0/0
  1342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1343 ;;      Params:         0       0       0       0       0       0       0
  1344 ;;      Locals:         0       0       0       0       0       0       0
  1345 ;;      Temps:          0       0       0       0       0       0       0
  1346 ;;      Totals:         0       0       0       0       0       0       0
  1347 ;;Total ram usage:        0 bytes
  1348 ;; Hardware stack levels used:    1
  1349 ;; This function calls:
  1350 ;;		Nothing
  1351 ;; This function is called by:
  1352 ;;		_TimerTest
  1353 ;; This function uses a non-reentrant model
  1354 ;;
  1355                           
  1356                           	psect	text5
  1357  0011E4                     __ptext5:
  1358                           	opt stack 0
  1359  0011E4                     _TMR0_StartTimer:
  1360                           	opt stack 29
  1361                           
  1362                           ;tmr0.c: 89: T0CONbits.TMR0ON = 1;
  1363                           
  1364                           ;incstack = 0
  1365  0011E4  8ED5               	bsf	4053,7,c	;volatile
  1366  0011E6  0012               	return		;funcret
  1367  0011E8                     __end_of_TMR0_StartTimer:
  1368                           	opt stack 0
  1369                           tblptru	equ	0xFF8
  1370                           tblptrh	equ	0xFF7
  1371                           tblptrl	equ	0xFF6
  1372                           tablat	equ	0xFF5
  1373                           postinc0	equ	0xFEE
  1374                           wreg	equ	0xFE8
  1375                           status	equ	0xFD8
  1376                           
  1377 ;; *************** function _TMR0_ReadTimer *****************
  1378 ;; Defined at:
  1379 ;;		line 98 in file "mcc_generated_files/tmr0.c"
  1380 ;; Parameters:    Size  Location     Type
  1381 ;;		None
  1382 ;; Auto vars:     Size  Location     Type
  1383 ;;  readVal         2    4[COMRAM] unsigned int 
  1384 ;;  readValHigh     1    7[COMRAM] unsigned char 
  1385 ;;  readValLow      1    6[COMRAM] unsigned char 
  1386 ;; Return value:  Size  Location     Type
  1387 ;;                  2    0[COMRAM] unsigned int 
  1388 ;; Registers used:
  1389 ;;		wreg, status,2
  1390 ;; Tracked objects:
  1391 ;;		On entry : 0/0
  1392 ;;		On exit  : 0/0
  1393 ;;		Unchanged: 0/0
  1394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1395 ;;      Params:         2       0       0       0       0       0       0
  1396 ;;      Locals:         4       0       0       0       0       0       0
  1397 ;;      Temps:          2       0       0       0       0       0       0
  1398 ;;      Totals:         8       0       0       0       0       0       0
  1399 ;;Total ram usage:        8 bytes
  1400 ;; Hardware stack levels used:    1
  1401 ;; This function calls:
  1402 ;;		Nothing
  1403 ;; This function is called by:
  1404 ;;		_TimerTest
  1405 ;; This function uses a non-reentrant model
  1406 ;;
  1407                           
  1408                           	psect	text6
  1409  0010EA                     __ptext6:
  1410                           	opt stack 0
  1411  0010EA                     _TMR0_ReadTimer:
  1412                           	opt stack 29
  1413                           
  1414                           ;tmr0.c: 100: uint16_t readVal;
  1415                           ;tmr0.c: 101: uint8_t readValLow;
  1416                           ;tmr0.c: 102: uint8_t readValHigh;
  1417                           ;tmr0.c: 104: readValLow = TMR0L;
  1418                           
  1419                           ;incstack = 0
  1420  0010EA  CFD6 F007          	movff	4054,TMR0_ReadTimer@readValLow	;volatile
  1421                           
  1422                           ;tmr0.c: 105: readValHigh = TMR0H;
  1423  0010EE  CFD7 F008          	movff	4055,TMR0_ReadTimer@readValHigh	;volatile
  1424                           
  1425                           ;tmr0.c: 106: readVal = ((uint16_t)readValHigh << 8) + readValLow;
  1426  0010F2  5008               	movf	TMR0_ReadTimer@readValHigh,w,c
  1427  0010F4  6E03               	movwf	??_TMR0_ReadTimer& (0+255),c
  1428  0010F6  5007               	movf	TMR0_ReadTimer@readValLow,w,c
  1429  0010F8  6E05               	movwf	TMR0_ReadTimer@readVal,c
  1430  0010FA  C003  F006         	movff	??_TMR0_ReadTimer,TMR0_ReadTimer@readVal+1
  1431                           
  1432                           ;tmr0.c: 108: return readVal;
  1433  0010FE  C005  F001         	movff	TMR0_ReadTimer@readVal,?_TMR0_ReadTimer
  1434  001102  C006  F002         	movff	TMR0_ReadTimer@readVal+1,?_TMR0_ReadTimer+1
  1435  001106  0012               	return	
  1436  001108                     __end_of_TMR0_ReadTimer:
  1437                           	opt stack 0
  1438                           tblptru	equ	0xFF8
  1439                           tblptrh	equ	0xFF7
  1440                           tblptrl	equ	0xFF6
  1441                           tablat	equ	0xFF5
  1442                           postinc0	equ	0xFEE
  1443                           wreg	equ	0xFE8
  1444                           status	equ	0xFD8
  1445                           
  1446 ;; *************** function _TMR0_HasOverflowOccured *****************
  1447 ;; Defined at:
  1448 ;;		line 125 in file "mcc_generated_files/tmr0.c"
  1449 ;; Parameters:    Size  Location     Type
  1450 ;;		None
  1451 ;; Auto vars:     Size  Location     Type
  1452 ;;		None
  1453 ;; Return value:  Size  Location     Type
  1454 ;;                  1    wreg      unsigned char 
  1455 ;; Registers used:
  1456 ;;		wreg
  1457 ;; Tracked objects:
  1458 ;;		On entry : 0/0
  1459 ;;		On exit  : 0/0
  1460 ;;		Unchanged: 0/0
  1461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1462 ;;      Params:         0       0       0       0       0       0       0
  1463 ;;      Locals:         0       0       0       0       0       0       0
  1464 ;;      Temps:          0       0       0       0       0       0       0
  1465 ;;      Totals:         0       0       0       0       0       0       0
  1466 ;;Total ram usage:        0 bytes
  1467 ;; Hardware stack levels used:    1
  1468 ;; This function calls:
  1469 ;;		Nothing
  1470 ;; This function is called by:
  1471 ;;		_TimerTest
  1472 ;; This function uses a non-reentrant model
  1473 ;;
  1474                           
  1475                           	psect	text7
  1476  0011BE                     __ptext7:
  1477                           	opt stack 0
  1478  0011BE                     _TMR0_HasOverflowOccured:
  1479                           	opt stack 29
  1480                           
  1481                           ;tmr0.c: 128: return(INTCONbits.TMR0IF);
  1482                           
  1483                           ;incstack = 0
  1484  0011BE  A4F2               	btfss	intcon,2,c	;volatile
  1485  0011C0  D002               	goto	u270
  1486  0011C2  0E01               	movlw	1
  1487  0011C4  0012               	return	
  1488  0011C6                     u270:
  1489  0011C6  0E00               	movlw	0
  1490  0011C8  0012               	return	
  1491  0011CA                     __end_of_TMR0_HasOverflowOccured:
  1492                           	opt stack 0
  1493                           tblptru	equ	0xFF8
  1494                           tblptrh	equ	0xFF7
  1495                           tblptrl	equ	0xFF6
  1496                           tablat	equ	0xFF5
  1497                           intcon	equ	0xFF2
  1498                           postinc0	equ	0xFEE
  1499                           wreg	equ	0xFE8
  1500                           status	equ	0xFD8
  1501                           
  1502 ;; *************** function _SYSTEM_Initialize *****************
  1503 ;; Defined at:
  1504 ;;		line 112 in file "mcc_generated_files/mcc.c"
  1505 ;; Parameters:    Size  Location     Type
  1506 ;;		None
  1507 ;; Auto vars:     Size  Location     Type
  1508 ;;		None
  1509 ;; Return value:  Size  Location     Type
  1510 ;;                  1    wreg      void 
  1511 ;; Registers used:
  1512 ;;		wreg, status,2, status,0, cstack
  1513 ;; Tracked objects:
  1514 ;;		On entry : 0/0
  1515 ;;		On exit  : 0/0
  1516 ;;		Unchanged: 0/0
  1517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1518 ;;      Params:         0       0       0       0       0       0       0
  1519 ;;      Locals:         0       0       0       0       0       0       0
  1520 ;;      Temps:          0       0       0       0       0       0       0
  1521 ;;      Totals:         0       0       0       0       0       0       0
  1522 ;;Total ram usage:        0 bytes
  1523 ;; Hardware stack levels used:    1
  1524 ;; Hardware stack levels required when called:    1
  1525 ;; This function calls:
  1526 ;;		_ADC_Initialize
  1527 ;;		_CCP5_Initialize
  1528 ;;		_EUSART1_Initialize
  1529 ;;		_OSCILLATOR_Initialize
  1530 ;;		_PIN_MANAGER_Initialize
  1531 ;;		_SPI1_Initialize
  1532 ;;		_TMR0_Initialize
  1533 ;; This function is called by:
  1534 ;;		_main
  1535 ;; This function uses a non-reentrant model
  1536 ;;
  1537                           
  1538                           	psect	text8
  1539  001108                     __ptext8:
  1540                           	opt stack 0
  1541  001108                     _SYSTEM_Initialize:
  1542                           	opt stack 29
  1543                           
  1544                           ;mcc.c: 114: PIN_MANAGER_Initialize();
  1545                           
  1546                           ;incstack = 0
  1547  001108  EC39  F008         	call	_PIN_MANAGER_Initialize	;wreg free
  1548                           
  1549                           ;mcc.c: 115: OSCILLATOR_Initialize();
  1550  00110C  ECB7  F008         	call	_OSCILLATOR_Initialize	;wreg free
  1551                           
  1552                           ;mcc.c: 116: SPI1_Initialize();
  1553  001110  ECD8  F008         	call	_SPI1_Initialize	;wreg free
  1554                           
  1555                           ;mcc.c: 117: CCP5_Initialize();
  1556  001114  ECC0  F008         	call	_CCP5_Initialize	;wreg free
  1557                           
  1558                           ;mcc.c: 118: ADC_Initialize();
  1559  001118  EC93  F008         	call	_ADC_Initialize	;wreg free
  1560                           
  1561                           ;mcc.c: 119: TMR0_Initialize();
  1562  00111C  EC50  F008         	call	_TMR0_Initialize	;wreg free
  1563                           
  1564                           ;mcc.c: 120: EUSART1_Initialize();
  1565  001120  ECA1  F008         	call	_EUSART1_Initialize	;wreg free
  1566  001124  0012               	return		;funcret
  1567  001126                     __end_of_SYSTEM_Initialize:
  1568                           	opt stack 0
  1569                           tblptru	equ	0xFF8
  1570                           tblptrh	equ	0xFF7
  1571                           tblptrl	equ	0xFF6
  1572                           tablat	equ	0xFF5
  1573                           intcon	equ	0xFF2
  1574                           postinc0	equ	0xFEE
  1575                           wreg	equ	0xFE8
  1576                           status	equ	0xFD8
  1577                           
  1578 ;; *************** function _TMR0_Initialize *****************
  1579 ;; Defined at:
  1580 ;;		line 65 in file "mcc_generated_files/tmr0.c"
  1581 ;; Parameters:    Size  Location     Type
  1582 ;;		None
  1583 ;; Auto vars:     Size  Location     Type
  1584 ;;		None
  1585 ;; Return value:  Size  Location     Type
  1586 ;;                  1    wreg      void 
  1587 ;; Registers used:
  1588 ;;		wreg, status,2, status,0
  1589 ;; Tracked objects:
  1590 ;;		On entry : 0/0
  1591 ;;		On exit  : 0/0
  1592 ;;		Unchanged: 0/0
  1593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1594 ;;      Params:         0       0       0       0       0       0       0
  1595 ;;      Locals:         0       0       0       0       0       0       0
  1596 ;;      Temps:          2       0       0       0       0       0       0
  1597 ;;      Totals:         2       0       0       0       0       0       0
  1598 ;;Total ram usage:        2 bytes
  1599 ;; Hardware stack levels used:    1
  1600 ;; This function calls:
  1601 ;;		Nothing
  1602 ;; This function is called by:
  1603 ;;		_SYSTEM_Initialize
  1604 ;; This function uses a non-reentrant model
  1605 ;;
  1606                           
  1607                           	psect	text9
  1608  0010A0                     __ptext9:
  1609                           	opt stack 0
  1610  0010A0                     _TMR0_Initialize:
  1611                           	opt stack 29
  1612                           
  1613                           ;tmr0.c: 70: TMR0H = 0x0B;
  1614                           
  1615                           ;incstack = 0
  1616  0010A0  0E0B               	movlw	11
  1617  0010A2  6ED7               	movwf	4055,c	;volatile
  1618                           
  1619                           ;tmr0.c: 73: TMR0L = 0xDC;
  1620  0010A4  0EDC               	movlw	220
  1621  0010A6  6ED6               	movwf	4054,c	;volatile
  1622                           
  1623                           ;tmr0.c: 77: timer0ReloadVal = (TMR0H << 8) | TMR0L;
  1624  0010A8  50D6               	movf	4054,w,c	;volatile
  1625  0010AA  CFD7 F001          	movff	4055,??_TMR0_Initialize	;volatile
  1626  0010AE  6A02               	clrf	(??_TMR0_Initialize+1)& (0+255),c
  1627  0010B0  C001  F002         	movff	??_TMR0_Initialize,??_TMR0_Initialize+1
  1628  0010B4  6A01               	clrf	??_TMR0_Initialize,c
  1629  0010B6  1001               	iorwf	??_TMR0_Initialize,w,c
  1630  0010B8  6E59               	movwf	_timer0ReloadVal,c	;volatile
  1631  0010BA  5002               	movf	??_TMR0_Initialize+1,w,c
  1632  0010BC  6E5A               	movwf	_timer0ReloadVal+1,c	;volatile
  1633                           
  1634                           ;tmr0.c: 80: INTCONbits.TMR0IF = 0;
  1635  0010BE  94F2               	bcf	intcon,2,c	;volatile
  1636                           
  1637                           ;tmr0.c: 83: T0CON = 0x97;
  1638  0010C0  0E97               	movlw	151
  1639  0010C2  6ED5               	movwf	4053,c	;volatile
  1640  0010C4  0012               	return		;funcret
  1641  0010C6                     __end_of_TMR0_Initialize:
  1642                           	opt stack 0
  1643                           tblptru	equ	0xFF8
  1644                           tblptrh	equ	0xFF7
  1645                           tblptrl	equ	0xFF6
  1646                           tablat	equ	0xFF5
  1647                           intcon	equ	0xFF2
  1648                           postinc0	equ	0xFEE
  1649                           wreg	equ	0xFE8
  1650                           status	equ	0xFD8
  1651                           
  1652 ;; *************** function _SPI1_Initialize *****************
  1653 ;; Defined at:
  1654 ;;		line 63 in file "mcc_generated_files/spi1.c"
  1655 ;; Parameters:    Size  Location     Type
  1656 ;;		None
  1657 ;; Auto vars:     Size  Location     Type
  1658 ;;		None
  1659 ;; Return value:  Size  Location     Type
  1660 ;;                  1    wreg      void 
  1661 ;; Registers used:
  1662 ;;		wreg, status,2
  1663 ;; Tracked objects:
  1664 ;;		On entry : 0/0
  1665 ;;		On exit  : 0/0
  1666 ;;		Unchanged: 0/0
  1667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1668 ;;      Params:         0       0       0       0       0       0       0
  1669 ;;      Locals:         0       0       0       0       0       0       0
  1670 ;;      Temps:          0       0       0       0       0       0       0
  1671 ;;      Totals:         0       0       0       0       0       0       0
  1672 ;;Total ram usage:        0 bytes
  1673 ;; Hardware stack levels used:    1
  1674 ;; This function calls:
  1675 ;;		Nothing
  1676 ;; This function is called by:
  1677 ;;		_SYSTEM_Initialize
  1678 ;; This function uses a non-reentrant model
  1679 ;;
  1680                           
  1681                           	psect	text10
  1682  0011B0                     __ptext10:
  1683                           	opt stack 0
  1684  0011B0                     _SPI1_Initialize:
  1685                           	opt stack 29
  1686                           
  1687                           ;spi1.c: 68: SSP1STAT = 0x40;
  1688                           
  1689                           ;incstack = 0
  1690  0011B0  0E40               	movlw	64
  1691  0011B2  6EC7               	movwf	4039,c	;volatile
  1692                           
  1693                           ;spi1.c: 71: SSP1CON1 = 0x20;
  1694  0011B4  0E20               	movlw	32
  1695  0011B6  6EC6               	movwf	4038,c	;volatile
  1696                           
  1697                           ;spi1.c: 74: SSP1ADD = 0x00;
  1698  0011B8  0E00               	movlw	0
  1699  0011BA  6EC8               	movwf	4040,c	;volatile
  1700  0011BC  0012               	return		;funcret
  1701  0011BE                     __end_of_SPI1_Initialize:
  1702                           	opt stack 0
  1703                           tblptru	equ	0xFF8
  1704                           tblptrh	equ	0xFF7
  1705                           tblptrl	equ	0xFF6
  1706                           tablat	equ	0xFF5
  1707                           intcon	equ	0xFF2
  1708                           postinc0	equ	0xFEE
  1709                           wreg	equ	0xFE8
  1710                           status	equ	0xFD8
  1711                           
  1712 ;; *************** function _PIN_MANAGER_Initialize *****************
  1713 ;; Defined at:
  1714 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  1715 ;; Parameters:    Size  Location     Type
  1716 ;;		None
  1717 ;; Auto vars:     Size  Location     Type
  1718 ;;		None
  1719 ;; Return value:  Size  Location     Type
  1720 ;;                  1    wreg      void 
  1721 ;; Registers used:
  1722 ;;		wreg, status,2
  1723 ;; Tracked objects:
  1724 ;;		On entry : 0/0
  1725 ;;		On exit  : 0/0
  1726 ;;		Unchanged: 0/0
  1727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1728 ;;      Params:         0       0       0       0       0       0       0
  1729 ;;      Locals:         0       0       0       0       0       0       0
  1730 ;;      Temps:          0       0       0       0       0       0       0
  1731 ;;      Totals:         0       0       0       0       0       0       0
  1732 ;;Total ram usage:        0 bytes
  1733 ;; Hardware stack levels used:    1
  1734 ;; This function calls:
  1735 ;;		Nothing
  1736 ;; This function is called by:
  1737 ;;		_SYSTEM_Initialize
  1738 ;; This function uses a non-reentrant model
  1739 ;;
  1740                           
  1741                           	psect	text11
  1742  001072                     __ptext11:
  1743                           	opt stack 0
  1744  001072                     _PIN_MANAGER_Initialize:
  1745                           	opt stack 29
  1746                           
  1747                           ;pin_manager.c: 57: LATA = 0x00;
  1748                           
  1749                           ;incstack = 0
  1750  001072  0E00               	movlw	0
  1751  001074  6E89               	movwf	3977,c	;volatile
  1752                           
  1753                           ;pin_manager.c: 58: LATB = 0x00;
  1754  001076  0E00               	movlw	0
  1755  001078  6E8A               	movwf	3978,c	;volatile
  1756                           
  1757                           ;pin_manager.c: 59: LATC = 0x04;
  1758  00107A  0E04               	movlw	4
  1759  00107C  6E8B               	movwf	3979,c	;volatile
  1760                           
  1761                           ;pin_manager.c: 64: TRISA = 0xCF;
  1762  00107E  0ECF               	movlw	207
  1763  001080  6E92               	movwf	3986,c	;volatile
  1764                           
  1765                           ;pin_manager.c: 65: TRISB = 0xCF;
  1766  001082  0ECF               	movlw	207
  1767  001084  6E93               	movwf	3987,c	;volatile
  1768                           
  1769                           ;pin_manager.c: 66: TRISC = 0x93;
  1770  001086  0E93               	movlw	147
  1771  001088  6E94               	movwf	3988,c	;volatile
  1772                           
  1773                           ;pin_manager.c: 71: ANSELC = 0x00;
  1774  00108A  0E00               	movlw	0
  1775  00108C  010F               	movlb	15	; () banked
  1776  00108E  6F3A               	movwf	58,b	;volatile
  1777                           
  1778                           ;pin_manager.c: 72: ANSELB = 0x33;
  1779  001090  0E33               	movlw	51
  1780  001092  6F39               	movwf	57,b	;volatile
  1781                           
  1782                           ;pin_manager.c: 73: ANSELA = 0x2F;
  1783  001094  0E2F               	movlw	47
  1784  001096  6F38               	movwf	56,b	;volatile
  1785                           
  1786                           ;pin_manager.c: 78: WPUB = 0x00;
  1787  001098  0E00               	movlw	0
  1788  00109A  6E61               	movwf	3937,c	;volatile
  1789                           
  1790                           ; BSR set to: 15
  1791                           ;pin_manager.c: 79: INTCON2bits.nRBPU = 1;
  1792  00109C  8EF1               	bsf	intcon2,7,c	;volatile
  1793                           
  1794                           ; BSR set to: 15
  1795  00109E  0012               	return		;funcret
  1796  0010A0                     __end_of_PIN_MANAGER_Initialize:
  1797                           	opt stack 0
  1798                           tblptru	equ	0xFF8
  1799                           tblptrh	equ	0xFF7
  1800                           tblptrl	equ	0xFF6
  1801                           tablat	equ	0xFF5
  1802                           intcon	equ	0xFF2
  1803                           intcon2	equ	0xFF1
  1804                           postinc0	equ	0xFEE
  1805                           wreg	equ	0xFE8
  1806                           status	equ	0xFD8
  1807                           
  1808 ;; *************** function _OSCILLATOR_Initialize *****************
  1809 ;; Defined at:
  1810 ;;		line 123 in file "mcc_generated_files/mcc.c"
  1811 ;; Parameters:    Size  Location     Type
  1812 ;;		None
  1813 ;; Auto vars:     Size  Location     Type
  1814 ;;		None
  1815 ;; Return value:  Size  Location     Type
  1816 ;;                  1    wreg      void 
  1817 ;; Registers used:
  1818 ;;		wreg, status,2
  1819 ;; Tracked objects:
  1820 ;;		On entry : 0/0
  1821 ;;		On exit  : 0/0
  1822 ;;		Unchanged: 0/0
  1823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1824 ;;      Params:         0       0       0       0       0       0       0
  1825 ;;      Locals:         0       0       0       0       0       0       0
  1826 ;;      Temps:          0       0       0       0       0       0       0
  1827 ;;      Totals:         0       0       0       0       0       0       0
  1828 ;;Total ram usage:        0 bytes
  1829 ;; Hardware stack levels used:    1
  1830 ;; This function calls:
  1831 ;;		Nothing
  1832 ;; This function is called by:
  1833 ;;		_SYSTEM_Initialize
  1834 ;; This function uses a non-reentrant model
  1835 ;;
  1836                           
  1837                           	psect	text12
  1838  00116E                     __ptext12:
  1839                           	opt stack 0
  1840  00116E                     _OSCILLATOR_Initialize:
  1841                           	opt stack 29
  1842                           
  1843                           ;mcc.c: 126: OSCCON = 0x70;
  1844                           
  1845                           ; BSR set to: 15
  1846                           ;incstack = 0
  1847  00116E  0E70               	movlw	112
  1848  001170  6ED3               	movwf	4051,c	;volatile
  1849                           
  1850                           ;mcc.c: 128: OSCCON2 = 0x04;
  1851  001172  0E04               	movlw	4
  1852  001174  6ED2               	movwf	4050,c	;volatile
  1853                           
  1854                           ;mcc.c: 130: OSCTUNE = 0x00;
  1855  001176  0E00               	movlw	0
  1856  001178  6E9B               	movwf	3995,c	;volatile
  1857  00117A                     
  1858                           ;mcc.c: 133: {
  1859  00117A  BED2               	btfsc	4050,7,c	;volatile
  1860  00117C  0012               	return	
  1861  00117E  D7FD               	goto	l29
  1862  001180                     __end_of_OSCILLATOR_Initialize:
  1863                           	opt stack 0
  1864                           tblptru	equ	0xFF8
  1865                           tblptrh	equ	0xFF7
  1866                           tblptrl	equ	0xFF6
  1867                           tablat	equ	0xFF5
  1868                           intcon	equ	0xFF2
  1869                           intcon2	equ	0xFF1
  1870                           postinc0	equ	0xFEE
  1871                           wreg	equ	0xFE8
  1872                           status	equ	0xFD8
  1873                           
  1874 ;; *************** function _EUSART1_Initialize *****************
  1875 ;; Defined at:
  1876 ;;		line 53 in file "mcc_generated_files/eusart1.c"
  1877 ;; Parameters:    Size  Location     Type
  1878 ;;		None
  1879 ;; Auto vars:     Size  Location     Type
  1880 ;;		None
  1881 ;; Return value:  Size  Location     Type
  1882 ;;                  1    wreg      void 
  1883 ;; Registers used:
  1884 ;;		wreg, status,2
  1885 ;; Tracked objects:
  1886 ;;		On entry : 0/0
  1887 ;;		On exit  : 0/0
  1888 ;;		Unchanged: 0/0
  1889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1890 ;;      Params:         0       0       0       0       0       0       0
  1891 ;;      Locals:         0       0       0       0       0       0       0
  1892 ;;      Temps:          0       0       0       0       0       0       0
  1893 ;;      Totals:         0       0       0       0       0       0       0
  1894 ;;Total ram usage:        0 bytes
  1895 ;; Hardware stack levels used:    1
  1896 ;; This function calls:
  1897 ;;		Nothing
  1898 ;; This function is called by:
  1899 ;;		_SYSTEM_Initialize
  1900 ;; This function uses a non-reentrant model
  1901 ;;
  1902                           
  1903                           	psect	text13
  1904  001142                     __ptext13:
  1905                           	opt stack 0
  1906  001142                     _EUSART1_Initialize:
  1907                           	opt stack 29
  1908                           
  1909                           ;eusart1.c: 58: BAUDCON1 = 0x08;
  1910                           
  1911                           ;incstack = 0
  1912  001142  0E08               	movlw	8
  1913  001144  6EB8               	movwf	4024,c	;volatile
  1914                           
  1915                           ;eusart1.c: 61: RCSTA1 = 0x90;
  1916  001146  0E90               	movlw	144
  1917  001148  6EAB               	movwf	4011,c	;volatile
  1918                           
  1919                           ;eusart1.c: 64: TXSTA1 = 0x24;
  1920  00114A  0E24               	movlw	36
  1921  00114C  6EAC               	movwf	4012,c	;volatile
  1922                           
  1923                           ;eusart1.c: 67: SPBRG1 = 0x82;
  1924  00114E  0E82               	movlw	130
  1925  001150  6EAF               	movwf	4015,c	;volatile
  1926                           
  1927                           ;eusart1.c: 70: SPBRGH1 = 0x06;
  1928  001152  0E06               	movlw	6
  1929  001154  6EB0               	movwf	4016,c	;volatile
  1930  001156  0012               	return		;funcret
  1931  001158                     __end_of_EUSART1_Initialize:
  1932                           	opt stack 0
  1933                           tblptru	equ	0xFF8
  1934                           tblptrh	equ	0xFF7
  1935                           tblptrl	equ	0xFF6
  1936                           tablat	equ	0xFF5
  1937                           intcon	equ	0xFF2
  1938                           intcon2	equ	0xFF1
  1939                           postinc0	equ	0xFEE
  1940                           wreg	equ	0xFE8
  1941                           status	equ	0xFD8
  1942                           
  1943 ;; *************** function _CCP5_Initialize *****************
  1944 ;; Defined at:
  1945 ;;		line 48 in file "mcc_generated_files/ccp5.c"
  1946 ;; Parameters:    Size  Location     Type
  1947 ;;		None
  1948 ;; Auto vars:     Size  Location     Type
  1949 ;;		None
  1950 ;; Return value:  Size  Location     Type
  1951 ;;                  1    wreg      void 
  1952 ;; Registers used:
  1953 ;;		wreg, status,2
  1954 ;; Tracked objects:
  1955 ;;		On entry : 0/0
  1956 ;;		On exit  : 0/0
  1957 ;;		Unchanged: 0/0
  1958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1959 ;;      Params:         0       0       0       0       0       0       0
  1960 ;;      Locals:         0       0       0       0       0       0       0
  1961 ;;      Temps:          0       0       0       0       0       0       0
  1962 ;;      Totals:         0       0       0       0       0       0       0
  1963 ;;Total ram usage:        0 bytes
  1964 ;; Hardware stack levels used:    1
  1965 ;; This function calls:
  1966 ;;		Nothing
  1967 ;; This function is called by:
  1968 ;;		_SYSTEM_Initialize
  1969 ;; This function uses a non-reentrant model
  1970 ;;
  1971                           
  1972                           	psect	text14
  1973  001180                     __ptext14:
  1974                           	opt stack 0
  1975  001180                     _CCP5_Initialize:
  1976                           	opt stack 29
  1977                           
  1978                           ;ccp5.c: 52: CCP5CON = 0x00;
  1979                           
  1980                           ;incstack = 0
  1981  001180  0E00               	movlw	0
  1982  001182  010F               	movlb	15	; () banked
  1983  001184  6F54               	movwf	84,b	;volatile
  1984                           
  1985                           ;ccp5.c: 55: CCPR5L = 0x00;
  1986  001186  0E00               	movlw	0
  1987  001188  6F55               	movwf	85,b	;volatile
  1988                           
  1989                           ;ccp5.c: 58: CCPR5H = 0x00;
  1990  00118A  0E00               	movlw	0
  1991  00118C  6F56               	movwf	86,b	;volatile
  1992                           
  1993                           ; BSR set to: 15
  1994  00118E  0012               	return		;funcret
  1995  001190                     __end_of_CCP5_Initialize:
  1996                           	opt stack 0
  1997                           tblptru	equ	0xFF8
  1998                           tblptrh	equ	0xFF7
  1999                           tblptrl	equ	0xFF6
  2000                           tablat	equ	0xFF5
  2001                           intcon	equ	0xFF2
  2002                           intcon2	equ	0xFF1
  2003                           postinc0	equ	0xFEE
  2004                           wreg	equ	0xFE8
  2005                           status	equ	0xFD8
  2006                           
  2007 ;; *************** function _ADC_Initialize *****************
  2008 ;; Defined at:
  2009 ;;		line 58 in file "mcc_generated_files/adc.c"
  2010 ;; Parameters:    Size  Location     Type
  2011 ;;		None
  2012 ;; Auto vars:     Size  Location     Type
  2013 ;;		None
  2014 ;; Return value:  Size  Location     Type
  2015 ;;                  1    wreg      void 
  2016 ;; Registers used:
  2017 ;;		wreg, status,2
  2018 ;; Tracked objects:
  2019 ;;		On entry : 0/0
  2020 ;;		On exit  : 0/0
  2021 ;;		Unchanged: 0/0
  2022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2023 ;;      Params:         0       0       0       0       0       0       0
  2024 ;;      Locals:         0       0       0       0       0       0       0
  2025 ;;      Temps:          0       0       0       0       0       0       0
  2026 ;;      Totals:         0       0       0       0       0       0       0
  2027 ;;Total ram usage:        0 bytes
  2028 ;; Hardware stack levels used:    1
  2029 ;; This function calls:
  2030 ;;		Nothing
  2031 ;; This function is called by:
  2032 ;;		_SYSTEM_Initialize
  2033 ;; This function uses a non-reentrant model
  2034 ;;
  2035                           
  2036                           	psect	text15
  2037  001126                     __ptext15:
  2038                           	opt stack 0
  2039  001126                     _ADC_Initialize:
  2040                           	opt stack 29
  2041                           
  2042                           ;adc.c: 63: ADCON0 = 0x01;
  2043                           
  2044                           ; BSR set to: 15
  2045                           ;incstack = 0
  2046  001126  0E01               	movlw	1
  2047  001128  6EC2               	movwf	4034,c	;volatile
  2048                           
  2049                           ;adc.c: 66: ADCON1 = 0x08;
  2050  00112A  0E08               	movlw	8
  2051  00112C  6EC1               	movwf	4033,c	;volatile
  2052                           
  2053                           ;adc.c: 69: ADCON2 = 0x8D;
  2054  00112E  0E8D               	movlw	141
  2055  001130  6EC0               	movwf	4032,c	;volatile
  2056                           
  2057                           ;adc.c: 72: ADRESL = 0x00;
  2058  001132  0E00               	movlw	0
  2059  001134  6EC3               	movwf	4035,c	;volatile
  2060                           
  2061                           ;adc.c: 75: ADRESH = 0x00;
  2062  001136  0E00               	movlw	0
  2063  001138  6EC4               	movwf	4036,c	;volatile
  2064                           
  2065                           ;adc.c: 77: VREFCON0 = 0xB0;
  2066  00113A  0EB0               	movlw	176
  2067  00113C  010F               	movlb	15	; () banked
  2068  00113E  6F42               	movwf	66,b	;volatile
  2069                           
  2070                           ; BSR set to: 15
  2071  001140  0012               	return		;funcret
  2072  001142                     __end_of_ADC_Initialize:
  2073                           	opt stack 0
  2074                           tblptru	equ	0xFF8
  2075                           tblptrh	equ	0xFF7
  2076                           tblptrl	equ	0xFF6
  2077                           tablat	equ	0xFF5
  2078                           intcon	equ	0xFF2
  2079                           intcon2	equ	0xFF1
  2080                           postinc0	equ	0xFEE
  2081                           wreg	equ	0xFE8
  2082                           status	equ	0xFD8
  2083                           
  2084 ;; *************** function _NormalWork *****************
  2085 ;; Defined at:
  2086 ;;		line 240 in file "main.c"
  2087 ;; Parameters:    Size  Location     Type
  2088 ;;  weld_detect     2   52[COMRAM] PTR unsigned int 
  2089 ;;		 -> main@weld_detect(2), 
  2090 ;;  delay           2   54[COMRAM] PTR unsigned char 
  2091 ;;		 -> main@probe_delay(1), 
  2092 ;;  level_detect    2   56[COMRAM] PTR unsigned int 
  2093 ;;		 -> main@level_detect(4), 
  2094 ;; Auto vars:     Size  Location     Type
  2095 ;;  count           1   63[COMRAM] unsigned char 
  2096 ;;  count           1   62[COMRAM] unsigned char 
  2097 ;;  result          2   66[COMRAM] unsigned int 
  2098 ;;  count_measur    2   60[COMRAM] unsigned int 
  2099 ;;  analog          1   65[COMRAM] enum E6697
  2100 ;;  weld            1   64[COMRAM] unsigned char 
  2101 ;; Return value:  Size  Location     Type
  2102 ;;                  1    wreg      void 
  2103 ;; Registers used:
  2104 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2105 ;; Tracked objects:
  2106 ;;		On entry : 0/0
  2107 ;;		On exit  : 0/0
  2108 ;;		Unchanged: 0/0
  2109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2110 ;;      Params:         6       0       0       0       0       0       0
  2111 ;;      Locals:         8       0       0       0       0       0       0
  2112 ;;      Temps:          2       0       0       0       0       0       0
  2113 ;;      Totals:        16       0       0       0       0       0       0
  2114 ;;Total ram usage:       16 bytes
  2115 ;; Hardware stack levels used:    1
  2116 ;; Hardware stack levels required when called:    4
  2117 ;; This function calls:
  2118 ;;		_ADC_GetConversion
  2119 ;;		_AutoSet
  2120 ;;		_DataSend
  2121 ;;		_ProbeDelay
  2122 ;; This function is called by:
  2123 ;;		_main
  2124 ;; This function uses a non-reentrant model
  2125 ;;
  2126                           
  2127                           	psect	text16
  2128  000606                     __ptext16:
  2129                           	opt stack 0
  2130  000606                     _NormalWork:
  2131                           	opt stack 26
  2132                           
  2133                           ;main.c: 242: adc_channel_t analog = op_out;
  2134                           
  2135                           ; BSR set to: 15
  2136                           ;incstack = 0
  2137  000606  0E01               	movlw	1
  2138  000608  6E42               	movwf	NormalWork@analog,c
  2139                           
  2140                           ;main.c: 243: uint16_t result;
  2141                           ;main.c: 244: uint16_t count_measure = 0;
  2142  00060A  0E00               	movlw	0
  2143  00060C  6E3E               	movwf	NormalWork@count_measure+1,c
  2144  00060E  0E00               	movlw	0
  2145  000610  6E3D               	movwf	NormalWork@count_measure,c
  2146                           
  2147                           ;main.c: 246: bool weld = 0;
  2148  000612  0E00               	movlw	0
  2149  000614  6E41               	movwf	NormalWork@weld,c
  2150                           
  2151                           ;main.c: 248: AutoSet(analog, weld_detect, level_detect);
  2152  000616  C035  F026         	movff	NormalWork@weld_detect,AutoSet@weld
  2153  00061A  C036  F027         	movff	NormalWork@weld_detect+1,AutoSet@weld+1
  2154  00061E  C039  F028         	movff	NormalWork@level_detect,AutoSet@detect
  2155  000622  C03A  F029         	movff	NormalWork@level_detect+1,AutoSet@detect+1
  2156  000626  5042               	movf	NormalWork@analog,w,c
  2157  000628  EC9D  F006         	call	_AutoSet
  2158  00062C                     
  2159                           ;main.c: 252: if (PIR1bits.RC1IF == 1){
  2160  00062C  BA9E               	btfsc	3998,5,c	;volatile
  2161  00062E  0012               	return	
  2162                           
  2163                           ;main.c: 254: }
  2164                           ;main.c: 258: ProbeDelay(*delay);
  2165                           
  2166                           ;main.c: 253: break;
  2167  000630  C037  FFD9         	movff	NormalWork@delay,fsr2l
  2168  000634  C038  FFDA         	movff	NormalWork@delay+1,fsr2h
  2169  000638  50DF               	movf	indf2,w,c
  2170  00063A  EC63  F008         	call	_ProbeDelay
  2171                           
  2172                           ;main.c: 259: result = ADC_GetConversion(analog);
  2173  00063E  5042               	movf	NormalWork@analog,w,c
  2174  000640  EC0A  F008         	call	_ADC_GetConversion
  2175  000644  C001  F043         	movff	?_ADC_GetConversion,NormalWork@result
  2176  000648  C002  F044         	movff	?_ADC_GetConversion+1,NormalWork@result+1
  2177                           
  2178                           ;main.c: 260: DataSend(result);
  2179  00064C  C043  F002         	movff	NormalWork@result,DataSend@data
  2180  000650  C044  F003         	movff	NormalWork@result+1,DataSend@data+1
  2181  000654  ECAC  F008         	call	_DataSend	;wreg free
  2182                           
  2183                           ;main.c: 262: if (count_measure >= 18000){
  2184  000658  0E50               	movlw	80
  2185  00065A  5C3D               	subwf	NormalWork@count_measure,w,c
  2186  00065C  0E46               	movlw	70
  2187  00065E  583E               	subwfb	NormalWork@count_measure+1,w,c
  2188  000660  B0D8               	btfsc	status,0,c
  2189                           
  2190                           ;main.c: 264: if (PORTBbits.RB3){
  2191  000662  A681               	btfss	3969,3,c	;volatile
  2192  000664  D00F               	goto	l337
  2193                           
  2194                           ;main.c: 266: AutoSet(analog, weld_detect, level_detect);
  2195  000666  C035  F026         	movff	NormalWork@weld_detect,AutoSet@weld
  2196  00066A  C036  F027         	movff	NormalWork@weld_detect+1,AutoSet@weld+1
  2197  00066E  C039  F028         	movff	NormalWork@level_detect,AutoSet@detect
  2198  000672  C03A  F029         	movff	NormalWork@level_detect+1,AutoSet@detect+1
  2199  000676  5042               	movf	NormalWork@analog,w,c
  2200  000678  EC9D  F006         	call	_AutoSet
  2201                           
  2202                           ;main.c: 267: count_measure = 0;
  2203  00067C  0E00               	movlw	0
  2204  00067E  6E3E               	movwf	NormalWork@count_measure+1,c
  2205  000680  0E00               	movlw	0
  2206  000682  6E3D               	movwf	NormalWork@count_measure,c
  2207  000684                     l337:
  2208                           
  2209                           ;main.c: 268: }
  2210                           ;main.c: 269: }
  2211                           ;main.c: 271: if ((result > calm_state[1]) && (PORTBbits.RB3 == 0)){
  2212  000684  5043               	movf	NormalWork@result,w,c
  2213  000686  5C57               	subwf	_calm_state+2,w,c
  2214  000688  5044               	movf	NormalWork@result+1,w,c
  2215  00068A  5858               	subwfb	_calm_state+3,w,c
  2216  00068C  A0D8               	btfss	status,0,c
  2217  00068E  B681               	btfsc	3969,3,c	;volatile
  2218  000690  D05E               	goto	l338
  2219                           
  2220                           ;main.c: 274: ProbeDelay(*delay);
  2221  000692  C037  FFD9         	movff	NormalWork@delay,fsr2l
  2222  000696  C038  FFDA         	movff	NormalWork@delay+1,fsr2h
  2223  00069A  50DF               	movf	indf2,w,c
  2224  00069C  EC63  F008         	call	_ProbeDelay
  2225                           
  2226                           ;main.c: 275: result = ADC_GetConversion(analog);
  2227  0006A0  5042               	movf	NormalWork@analog,w,c
  2228  0006A2  EC0A  F008         	call	_ADC_GetConversion
  2229  0006A6  C001  F043         	movff	?_ADC_GetConversion,NormalWork@result
  2230  0006AA  C002  F044         	movff	?_ADC_GetConversion+1,NormalWork@result+1
  2231                           
  2232                           ;main.c: 276: DataSend(result);
  2233  0006AE  C043  F002         	movff	NormalWork@result,DataSend@data
  2234  0006B2  C044  F003         	movff	NormalWork@result+1,DataSend@data+1
  2235  0006B6  ECAC  F008         	call	_DataSend	;wreg free
  2236                           
  2237                           ;main.c: 277: if (result >= (level_detect[1])){
  2238  0006BA  EE20 F002          	lfsr	2,2
  2239  0006BE  5039               	movf	NormalWork@level_detect,w,c
  2240  0006C0  26D9               	addwf	fsr2l,f,c
  2241  0006C2  503A               	movf	NormalWork@level_detect+1,w,c
  2242  0006C4  22DA               	addwfc	fsr2h,f,c
  2243  0006C6  50DE               	movf	postinc2,w,c
  2244  0006C8  5C43               	subwf	NormalWork@result,w,c
  2245  0006CA  50DE               	movf	postinc2,w,c
  2246  0006CC  5844               	subwfb	NormalWork@result+1,w,c
  2247  0006CE  A0D8               	btfss	status,0,c
  2248  0006D0  D0A4               	goto	l376
  2249                           
  2250                           ;main.c: 280: do { LATAbits.LATA5 = 1; } while(0);
  2251  0006D2  8A89               	bsf	3977,5,c	;volatile
  2252                           
  2253                           ;main.c: 281: do { LATBbits.LATB5 = 1; } while(0);
  2254  0006D4  8A8A               	bsf	3978,5,c	;volatile
  2255                           
  2256                           ;main.c: 282: weld = 1;
  2257  0006D6  0E01               	movlw	1
  2258  0006D8  D035               	goto	L2
  2259  0006DA                     
  2260                           ;main.c: 284: if (!filtr){
  2261  0006DA  505B               	movf	_filtr,w,c
  2262  0006DC  A4D8               	btfss	status,2,c
  2263  0006DE  D011               	goto	l346
  2264                           
  2265                           ;main.c: 286: uint8_t count = 0;
  2266  0006E0  0E00               	movlw	0
  2267  0006E2  6E3F               	movwf	NormalWork@count,c
  2268                           
  2269                           ;main.c: 287: while (count > 2){
  2270  0006E4  D008               	goto	l347
  2271  0006E6                     
  2272                           ;main.c: 288: ProbeDelay(*delay);
  2273  0006E6  C037  FFD9         	movff	NormalWork@delay,fsr2l
  2274  0006EA  C038  FFDA         	movff	NormalWork@delay+1,fsr2h
  2275  0006EE  50DF               	movf	indf2,w,c
  2276  0006F0  EC63  F008         	call	_ProbeDelay
  2277                           
  2278                           ;main.c: 289: count++;
  2279  0006F4  2A3F               	incf	NormalWork@count,f,c
  2280  0006F6                     l347:
  2281  0006F6  0E03               	movlw	3
  2282  0006F8  603F               	cpfslt	NormalWork@count,c
  2283  0006FA  D7F5               	goto	l348
  2284                           
  2285                           ;main.c: 290: }
  2286                           ;main.c: 292: filtr = 1;
  2287  0006FC  0E01               	movlw	1
  2288  0006FE  6E5B               	movwf	_filtr,c
  2289                           
  2290                           ;main.c: 293: }else ProbeDelay(*delay);
  2291  000700  D007               	goto	l350
  2292  000702                     l346:
  2293  000702  C037  FFD9         	movff	NormalWork@delay,fsr2l
  2294  000706  C038  FFDA         	movff	NormalWork@delay+1,fsr2h
  2295  00070A  50DF               	movf	indf2,w,c
  2296  00070C  EC63  F008         	call	_ProbeDelay
  2297  000710                     l350:
  2298                           
  2299                           ;main.c: 295: result = ADC_GetConversion(analog);
  2300  000710  5042               	movf	NormalWork@analog,w,c
  2301  000712  EC0A  F008         	call	_ADC_GetConversion
  2302  000716  C001  F043         	movff	?_ADC_GetConversion,NormalWork@result
  2303  00071A  C002  F044         	movff	?_ADC_GetConversion+1,NormalWork@result+1
  2304                           
  2305                           ;main.c: 296: DataSend(result);
  2306  00071E  C043  F002         	movff	NormalWork@result,DataSend@data
  2307  000722  C044  F003         	movff	NormalWork@result+1,DataSend@data+1
  2308  000726  ECAC  F008         	call	_DataSend	;wreg free
  2309                           
  2310                           ;main.c: 297: if (result < (level_detect[1])){
  2311  00072A  EE20 F002          	lfsr	2,2
  2312  00072E  5039               	movf	NormalWork@level_detect,w,c
  2313  000730  26D9               	addwf	fsr2l,f,c
  2314  000732  503A               	movf	NormalWork@level_detect+1,w,c
  2315  000734  22DA               	addwfc	fsr2h,f,c
  2316  000736  50DE               	movf	postinc2,w,c
  2317  000738  5C43               	subwf	NormalWork@result,w,c
  2318  00073A  50DE               	movf	postinc2,w,c
  2319  00073C  5844               	subwfb	NormalWork@result+1,w,c
  2320  00073E  B0D8               	btfsc	status,0,c
  2321  000740  D002               	goto	l351
  2322                           
  2323                           ;main.c: 298: weld = 0;
  2324  000742  0E00               	movlw	0
  2325  000744                     L2:
  2326  000744  6E41               	movwf	NormalWork@weld,c
  2327  000746                     l351:
  2328  000746  5041               	movf	NormalWork@weld,w,c
  2329  000748  A4D8               	btfss	status,2,c
  2330  00074A  D7C7               	goto	l345
  2331  00074C  D064               	goto	L4
  2332  00074E                     l338:
  2333  00074E  5055               	movf	_calm_state,w,c
  2334  000750  5C43               	subwf	NormalWork@result,w,c
  2335  000752  5056               	movf	_calm_state+1,w,c
  2336  000754  5844               	subwfb	NormalWork@result+1,w,c
  2337  000756  A0D8               	btfss	status,0,c
  2338  000758  A681               	btfss	3969,3,c	;volatile
  2339  00075A  D05F               	goto	l376
  2340                           
  2341                           ;main.c: 307: ProbeDelay(*delay);
  2342  00075C  C037  FFD9         	movff	NormalWork@delay,fsr2l
  2343  000760  C038  FFDA         	movff	NormalWork@delay+1,fsr2h
  2344  000764  50DF               	movf	indf2,w,c
  2345  000766  EC63  F008         	call	_ProbeDelay
  2346                           
  2347                           ;main.c: 308: result = ADC_GetConversion(analog);
  2348  00076A  5042               	movf	NormalWork@analog,w,c
  2349  00076C  EC0A  F008         	call	_ADC_GetConversion
  2350  000770  C001  F043         	movff	?_ADC_GetConversion,NormalWork@result
  2351  000774  C002  F044         	movff	?_ADC_GetConversion+1,NormalWork@result+1
  2352                           
  2353                           ;main.c: 309: DataSend(result);
  2354  000778  C043  F002         	movff	NormalWork@result,DataSend@data
  2355  00077C  C044  F003         	movff	NormalWork@result+1,DataSend@data+1
  2356  000780  ECAC  F008         	call	_DataSend	;wreg free
  2357                           
  2358                           ;main.c: 310: if (result <= (level_detect[1])){
  2359  000784  EE20 F002          	lfsr	2,2
  2360  000788  5039               	movf	NormalWork@level_detect,w,c
  2361  00078A  26D9               	addwf	fsr2l,f,c
  2362  00078C  503A               	movf	NormalWork@level_detect+1,w,c
  2363  00078E  22DA               	addwfc	fsr2h,f,c
  2364  000790  5043               	movf	NormalWork@result,w,c
  2365  000792  5CDE               	subwf	postinc2,w,c
  2366  000794  5044               	movf	NormalWork@result+1,w,c
  2367  000796  58DE               	subwfb	postinc2,w,c
  2368  000798  A0D8               	btfss	status,0,c
  2369  00079A  D03F               	goto	l376
  2370                           
  2371                           ;main.c: 313: do { LATAbits.LATA5 = 1; } while(0);
  2372  00079C  8A89               	bsf	3977,5,c	;volatile
  2373                           
  2374                           ;main.c: 314: do { LATBbits.LATB5 = 1; } while(0);
  2375  00079E  8A8A               	bsf	3978,5,c	;volatile
  2376                           
  2377                           ;main.c: 315: weld = 1;
  2378  0007A0  0E01               	movlw	1
  2379  0007A2  D035               	goto	L3
  2380  0007A4                     
  2381                           ;main.c: 317: if (!filtr){
  2382  0007A4  505B               	movf	_filtr,w,c
  2383  0007A6  A4D8               	btfss	status,2,c
  2384  0007A8  D011               	goto	l366
  2385                           
  2386                           ;main.c: 319: uint8_t count = 0;
  2387  0007AA  0E00               	movlw	0
  2388  0007AC  6E40               	movwf	NormalWork@count_1130,c
  2389                           
  2390                           ;main.c: 320: while (count > 2){
  2391  0007AE  D008               	goto	l367
  2392  0007B0                     
  2393                           ;main.c: 321: ProbeDelay(*delay);
  2394  0007B0  C037  FFD9         	movff	NormalWork@delay,fsr2l
  2395  0007B4  C038  FFDA         	movff	NormalWork@delay+1,fsr2h
  2396  0007B8  50DF               	movf	indf2,w,c
  2397  0007BA  EC63  F008         	call	_ProbeDelay
  2398                           
  2399                           ;main.c: 322: count++;
  2400  0007BE  2A40               	incf	NormalWork@count_1130,f,c
  2401  0007C0                     l367:
  2402  0007C0  0E03               	movlw	3
  2403  0007C2  6040               	cpfslt	NormalWork@count_1130,c
  2404  0007C4  D7F5               	goto	l368
  2405                           
  2406                           ;main.c: 323: }
  2407                           ;main.c: 325: filtr = 1;
  2408  0007C6  0E01               	movlw	1
  2409  0007C8  6E5B               	movwf	_filtr,c
  2410                           
  2411                           ;main.c: 326: }else ProbeDelay(*delay);
  2412  0007CA  D007               	goto	l370
  2413  0007CC                     l366:
  2414  0007CC  C037  FFD9         	movff	NormalWork@delay,fsr2l
  2415  0007D0  C038  FFDA         	movff	NormalWork@delay+1,fsr2h
  2416  0007D4  50DF               	movf	indf2,w,c
  2417  0007D6  EC63  F008         	call	_ProbeDelay
  2418  0007DA                     l370:
  2419                           
  2420                           ;main.c: 328: result = ADC_GetConversion(analog);
  2421  0007DA  5042               	movf	NormalWork@analog,w,c
  2422  0007DC  EC0A  F008         	call	_ADC_GetConversion
  2423  0007E0  C001  F043         	movff	?_ADC_GetConversion,NormalWork@result
  2424  0007E4  C002  F044         	movff	?_ADC_GetConversion+1,NormalWork@result+1
  2425                           
  2426                           ;main.c: 329: DataSend(result);
  2427  0007E8  C043  F002         	movff	NormalWork@result,DataSend@data
  2428  0007EC  C044  F003         	movff	NormalWork@result+1,DataSend@data+1
  2429  0007F0  ECAC  F008         	call	_DataSend	;wreg free
  2430                           
  2431                           ;main.c: 330: if (result > (level_detect[1])){
  2432  0007F4  EE20 F002          	lfsr	2,2
  2433  0007F8  5039               	movf	NormalWork@level_detect,w,c
  2434  0007FA  26D9               	addwf	fsr2l,f,c
  2435  0007FC  503A               	movf	NormalWork@level_detect+1,w,c
  2436  0007FE  22DA               	addwfc	fsr2h,f,c
  2437  000800  5043               	movf	NormalWork@result,w,c
  2438  000802  5CDE               	subwf	postinc2,w,c
  2439  000804  5044               	movf	NormalWork@result+1,w,c
  2440  000806  58DE               	subwfb	postinc2,w,c
  2441  000808  B0D8               	btfsc	status,0,c
  2442  00080A  D002               	goto	l371
  2443                           
  2444                           ;main.c: 331: weld = 0;
  2445  00080C  0E00               	movlw	0
  2446  00080E                     L3:
  2447  00080E  6E41               	movwf	NormalWork@weld,c
  2448  000810                     l371:
  2449  000810  5041               	movf	NormalWork@weld,w,c
  2450  000812  A4D8               	btfss	status,2,c
  2451  000814  D7C7               	goto	l365
  2452  000816                     L4:
  2453                           
  2454                           ;main.c: 332: }
  2455                           ;main.c: 333: }
  2456                           ;main.c: 334: do { LATAbits.LATA5 = 0; } while(0);
  2457  000816  9A89               	bcf	3977,5,c	;volatile
  2458                           
  2459                           ;main.c: 335: do { LATBbits.LATB5 = 0; } while(0);
  2460  000818  9A8A               	bcf	3978,5,c	;volatile
  2461  00081A                     l376:
  2462                           
  2463                           ;main.c: 337: }
  2464                           ;main.c: 338: }
  2465                           ;main.c: 339: count_measure++;
  2466  00081A  4A3D               	infsnz	NormalWork@count_measure,f,c
  2467  00081C  2A3E               	incf	NormalWork@count_measure+1,f,c
  2468                           
  2469                           ;main.c: 340: }
  2470  00081E  D706               	goto	l333
  2471  000820                     __end_of_NormalWork:
  2472                           	opt stack 0
  2473                           tblptru	equ	0xFF8
  2474                           tblptrh	equ	0xFF7
  2475                           tblptrl	equ	0xFF6
  2476                           tablat	equ	0xFF5
  2477                           intcon	equ	0xFF2
  2478                           intcon2	equ	0xFF1
  2479                           postinc0	equ	0xFEE
  2480                           wreg	equ	0xFE8
  2481                           indf2	equ	0xFDF
  2482                           postinc2	equ	0xFDE
  2483                           fsr2h	equ	0xFDA
  2484                           fsr2l	equ	0xFD9
  2485                           status	equ	0xFD8
  2486                           
  2487 ;; *************** function _DataSend *****************
  2488 ;; Defined at:
  2489 ;;		line 371 in file "main.c"
  2490 ;; Parameters:    Size  Location     Type
  2491 ;;  data            2    1[COMRAM] unsigned int 
  2492 ;; Auto vars:     Size  Location     Type
  2493 ;;  sendH           1    4[COMRAM] unsigned char 
  2494 ;;  sendL           1    3[COMRAM] unsigned char 
  2495 ;; Return value:  Size  Location     Type
  2496 ;;                  1    wreg      void 
  2497 ;; Registers used:
  2498 ;;		wreg, status,2, cstack
  2499 ;; Tracked objects:
  2500 ;;		On entry : 0/0
  2501 ;;		On exit  : 0/0
  2502 ;;		Unchanged: 0/0
  2503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2504 ;;      Params:         2       0       0       0       0       0       0
  2505 ;;      Locals:         2       0       0       0       0       0       0
  2506 ;;      Temps:          0       0       0       0       0       0       0
  2507 ;;      Totals:         4       0       0       0       0       0       0
  2508 ;;Total ram usage:        4 bytes
  2509 ;; Hardware stack levels used:    1
  2510 ;; Hardware stack levels required when called:    1
  2511 ;; This function calls:
  2512 ;;		_EUSART1_Write
  2513 ;; This function is called by:
  2514 ;;		_main
  2515 ;;		_analog_send
  2516 ;;		_NormalWork
  2517 ;; This function uses a non-reentrant model
  2518 ;;
  2519                           
  2520                           	psect	text17
  2521  001158                     __ptext17:
  2522                           	opt stack 0
  2523  001158                     _DataSend:
  2524                           	opt stack 28
  2525                           
  2526                           ;main.c: 373: uint8_t sendL, sendH;
  2527                           ;main.c: 374: sendL = data;
  2528                           
  2529                           ;incstack = 0
  2530  001158  C002  F004         	movff	DataSend@data,DataSend@sendL
  2531                           
  2532                           ;main.c: 375: sendH = (data >> 8);
  2533  00115C  5003               	movf	DataSend@data+1,w,c
  2534  00115E  6E05               	movwf	DataSend@sendH,c
  2535                           
  2536                           ;main.c: 376: EUSART1_Write(sendL);
  2537  001160  5004               	movf	DataSend@sendL,w,c
  2538  001162  ECE5  F008         	call	_EUSART1_Write
  2539                           
  2540                           ;main.c: 377: EUSART1_Write(sendH);
  2541  001166  5005               	movf	DataSend@sendH,w,c
  2542  001168  ECE5  F008         	call	_EUSART1_Write
  2543  00116C  0012               	return		;funcret
  2544  00116E                     __end_of_DataSend:
  2545                           	opt stack 0
  2546                           tblptru	equ	0xFF8
  2547                           tblptrh	equ	0xFF7
  2548                           tblptrl	equ	0xFF6
  2549                           tablat	equ	0xFF5
  2550                           intcon	equ	0xFF2
  2551                           intcon2	equ	0xFF1
  2552                           postinc0	equ	0xFEE
  2553                           wreg	equ	0xFE8
  2554                           indf2	equ	0xFDF
  2555                           postinc2	equ	0xFDE
  2556                           fsr2h	equ	0xFDA
  2557                           fsr2l	equ	0xFD9
  2558                           status	equ	0xFD8
  2559                           
  2560 ;; *************** function _EUSART1_Write *****************
  2561 ;; Defined at:
  2562 ;;		line 93 in file "mcc_generated_files/eusart1.c"
  2563 ;; Parameters:    Size  Location     Type
  2564 ;;  txData          1    wreg     unsigned char 
  2565 ;; Auto vars:     Size  Location     Type
  2566 ;;  txData          1    0[COMRAM] unsigned char 
  2567 ;; Return value:  Size  Location     Type
  2568 ;;                  1    wreg      void 
  2569 ;; Registers used:
  2570 ;;		wreg
  2571 ;; Tracked objects:
  2572 ;;		On entry : 0/0
  2573 ;;		On exit  : 0/0
  2574 ;;		Unchanged: 0/0
  2575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2576 ;;      Params:         0       0       0       0       0       0       0
  2577 ;;      Locals:         1       0       0       0       0       0       0
  2578 ;;      Temps:          0       0       0       0       0       0       0
  2579 ;;      Totals:         1       0       0       0       0       0       0
  2580 ;;Total ram usage:        1 bytes
  2581 ;; Hardware stack levels used:    1
  2582 ;; This function calls:
  2583 ;;		Nothing
  2584 ;; This function is called by:
  2585 ;;		_main
  2586 ;;		_DataSend
  2587 ;; This function uses a non-reentrant model
  2588 ;;
  2589                           
  2590                           	psect	text18
  2591  0011CA                     __ptext18:
  2592                           	opt stack 0
  2593  0011CA                     _EUSART1_Write:
  2594                           	opt stack 28
  2595                           
  2596                           ;incstack = 0
  2597                           ;EUSART1_Write@txData stored from wreg
  2598  0011CA  6E01               	movwf	EUSART1_Write@txData,c
  2599  0011CC                     
  2600                           ;eusart1.c: 96: {
  2601                           
  2602                           ;eusart1.c: 95: while(0 == PIR1bits.TX1IF)
  2603  0011CC  A89E               	btfss	3998,4,c	;volatile
  2604  0011CE  D7FE               	goto	l1191
  2605                           
  2606                           ;eusart1.c: 97: }
  2607                           ;eusart1.c: 99: TXREG1 = txData;
  2608  0011D0  C001  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
  2609  0011D4  0012               	return		;funcret
  2610  0011D6                     __end_of_EUSART1_Write:
  2611                           	opt stack 0
  2612                           tblptru	equ	0xFF8
  2613                           tblptrh	equ	0xFF7
  2614                           tblptrl	equ	0xFF6
  2615                           tablat	equ	0xFF5
  2616                           intcon	equ	0xFF2
  2617                           intcon2	equ	0xFF1
  2618                           postinc0	equ	0xFEE
  2619                           wreg	equ	0xFE8
  2620                           indf2	equ	0xFDF
  2621                           postinc2	equ	0xFDE
  2622                           fsr2h	equ	0xFDA
  2623                           fsr2l	equ	0xFD9
  2624                           status	equ	0xFD8
  2625                           
  2626 ;; *************** function _AutoSet *****************
  2627 ;; Defined at:
  2628 ;;		line 344 in file "main.c"
  2629 ;; Parameters:    Size  Location     Type
  2630 ;;  analog          1    wreg     enum E6697
  2631 ;;  weld            2   37[COMRAM] PTR unsigned int 
  2632 ;;		 -> main@weld_detect(2), 
  2633 ;;  detect          2   39[COMRAM] PTR unsigned int 
  2634 ;;		 -> main@level_detect(4), 
  2635 ;; Auto vars:     Size  Location     Type
  2636 ;;  analog          1   49[COMRAM] enum E6697
  2637 ;;  prumer          2   50[COMRAM] unsigned int 
  2638 ;;  max             2   47[COMRAM] unsigned int 
  2639 ;;  min             2   45[COMRAM] unsigned int 
  2640 ;;  tmp             2    0        unsigned int 
  2641 ;; Return value:  Size  Location     Type
  2642 ;;                  1    wreg      void 
  2643 ;; Registers used:
  2644 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2645 ;; Tracked objects:
  2646 ;;		On entry : 0/0
  2647 ;;		On exit  : 0/0
  2648 ;;		Unchanged: 0/0
  2649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2650 ;;      Params:         4       0       0       0       0       0       0
  2651 ;;      Locals:         7       0       0       0       0       0       0
  2652 ;;      Temps:          4       0       0       0       0       0       0
  2653 ;;      Totals:        15       0       0       0       0       0       0
  2654 ;;Total ram usage:       15 bytes
  2655 ;; Hardware stack levels used:    1
  2656 ;; Hardware stack levels required when called:    3
  2657 ;; This function calls:
  2658 ;;		_Calibrate
  2659 ;;		_MinMax
  2660 ;; This function is called by:
  2661 ;;		_main
  2662 ;;		_NormalWork
  2663 ;; This function uses a non-reentrant model
  2664 ;;
  2665                           
  2666                           	psect	text19
  2667  000D3A                     __ptext19:
  2668                           	opt stack 0
  2669  000D3A                     _AutoSet:
  2670                           	opt stack 26
  2671                           
  2672                           ;incstack = 0
  2673                           ;AutoSet@analog stored from wreg
  2674  000D3A  6E32               	movwf	AutoSet@analog,c
  2675                           
  2676                           ;main.c: 349: uint16_t min, max, tmp;
  2677                           ;main.c: 350: uint16_t prumer = 0;
  2678  000D3C  0E00               	movlw	0
  2679  000D3E  6E34               	movwf	AutoSet@prumer+1,c
  2680  000D40  0E00               	movlw	0
  2681  000D42  6E33               	movwf	AutoSet@prumer,c
  2682                           
  2683                           ;main.c: 351: analog = op_out;
  2684  000D44  0E01               	movlw	1
  2685  000D46  6E32               	movwf	AutoSet@analog,c
  2686                           
  2687                           ;main.c: 352: MinMax(analog, 10, &min, &max, &prumer);
  2688  000D48  0E0A               	movlw	10
  2689  000D4A  6E09               	movwf	MinMax@count,c
  2690  000D4C  0E2E               	movlw	low AutoSet@min
  2691  000D4E  6E0A               	movwf	MinMax@min,c
  2692  000D50  0E00               	movlw	high AutoSet@min
  2693  000D52  6E0B               	movwf	MinMax@min+1,c
  2694  000D54  0E30               	movlw	low AutoSet@max
  2695  000D56  6E0C               	movwf	MinMax@max,c
  2696  000D58  0E00               	movlw	high AutoSet@max
  2697  000D5A  6E0D               	movwf	MinMax@max+1,c
  2698  000D5C  0E33               	movlw	low AutoSet@prumer
  2699  000D5E  6E0E               	movwf	MinMax@prumer,c
  2700  000D60  0E00               	movlw	high AutoSet@prumer
  2701  000D62  6E0F               	movwf	MinMax@prumer+1,c
  2702  000D64  5032               	movf	AutoSet@analog,w,c
  2703  000D66  EC0D  F006         	call	_MinMax
  2704                           
  2705                           ;main.c: 354: if ((calm_state[0] == 0) || (calm_state[1] == 0)) {
  2706  000D6A  5055               	movf	_calm_state,w,c
  2707  000D6C  1056               	iorwf	_calm_state+1,w,c
  2708  000D6E  B4D8               	btfsc	status,2,c
  2709  000D70  D004               	goto	u910
  2710  000D72  5057               	movf	_calm_state+2,w,c
  2711  000D74  1058               	iorwf	_calm_state+3,w,c
  2712  000D76  A4D8               	btfss	status,2,c
  2713  000D78  D004               	goto	l380
  2714  000D7A                     u910:
  2715                           
  2716                           ;main.c: 355: Calibrate(analog);
  2717  000D7A  5032               	movf	AutoSet@analog,w,c
  2718  000D7C  EC10  F004         	call	_Calibrate
  2719                           
  2720                           ;main.c: 356: }
  2721  000D80  D011               	goto	l384
  2722  000D82                     l380:
  2723                           
  2724                           ;main.c: 357: else if ((prumer <= calm_state[0]) || (prumer >= calm_state[1])){
  2725  000D82  5033               	movf	AutoSet@prumer,w,c
  2726  000D84  5C55               	subwf	_calm_state,w,c
  2727  000D86  5034               	movf	AutoSet@prumer+1,w,c
  2728  000D88  5856               	subwfb	_calm_state+1,w,c
  2729  000D8A  B0D8               	btfsc	status,0,c
  2730  000D8C  D006               	goto	u930
  2731  000D8E  5057               	movf	_calm_state+2,w,c
  2732  000D90  5C33               	subwf	AutoSet@prumer,w,c
  2733  000D92  5058               	movf	_calm_state+3,w,c
  2734  000D94  5834               	subwfb	AutoSet@prumer+1,w,c
  2735  000D96  A0D8               	btfss	status,0,c
  2736  000D98  D005               	goto	l384
  2737  000D9A                     u930:
  2738                           
  2739                           ;main.c: 359: Calibrate(analog);
  2740  000D9A  5032               	movf	AutoSet@analog,w,c
  2741  000D9C  EC10  F004         	call	_Calibrate
  2742                           
  2743                           ;main.c: 360: analog = op_out;
  2744  000DA0  0E01               	movlw	1
  2745  000DA2  6E32               	movwf	AutoSet@analog,c
  2746  000DA4                     l384:
  2747                           
  2748                           ;main.c: 361: }
  2749                           ;main.c: 363: MinMax(analog, 10, &min, &max, &prumer);
  2750  000DA4  0E0A               	movlw	10
  2751  000DA6  6E09               	movwf	MinMax@count,c
  2752  000DA8  0E2E               	movlw	low AutoSet@min
  2753  000DAA  6E0A               	movwf	MinMax@min,c
  2754  000DAC  0E00               	movlw	high AutoSet@min
  2755  000DAE  6E0B               	movwf	MinMax@min+1,c
  2756  000DB0  0E30               	movlw	low AutoSet@max
  2757  000DB2  6E0C               	movwf	MinMax@max,c
  2758  000DB4  0E00               	movlw	high AutoSet@max
  2759  000DB6  6E0D               	movwf	MinMax@max+1,c
  2760  000DB8  0E33               	movlw	low AutoSet@prumer
  2761  000DBA  6E0E               	movwf	MinMax@prumer,c
  2762  000DBC  0E00               	movlw	high AutoSet@prumer
  2763  000DBE  6E0F               	movwf	MinMax@prumer+1,c
  2764  000DC0  5032               	movf	AutoSet@analog,w,c
  2765  000DC2  EC0D  F006         	call	_MinMax
  2766                           
  2767                           ;main.c: 364: calm_state[0] = prumer - offset;
  2768  000DC6  505E               	movf	_offset,w,c
  2769  000DC8  6E2A               	movwf	??_AutoSet& (0+255),c
  2770  000DCA  6A2B               	clrf	(??_AutoSet+1)& (0+255),c
  2771  000DCC  1E2A               	comf	??_AutoSet,f,c
  2772  000DCE  1E2B               	comf	??_AutoSet+1,f,c
  2773  000DD0  4A2A               	infsnz	??_AutoSet,f,c
  2774  000DD2  2A2B               	incf	??_AutoSet+1,f,c
  2775  000DD4  5033               	movf	AutoSet@prumer,w,c
  2776  000DD6  242A               	addwf	??_AutoSet,w,c
  2777  000DD8  6E55               	movwf	_calm_state,c
  2778  000DDA  5034               	movf	AutoSet@prumer+1,w,c
  2779  000DDC  202B               	addwfc	??_AutoSet+1,w,c
  2780  000DDE  6E56               	movwf	_calm_state+1,c
  2781                           
  2782                           ;main.c: 365: detect[0] = calm_state[0] - *weld;
  2783  000DE0  C026  FFD9         	movff	AutoSet@weld,fsr2l
  2784  000DE4  C027  FFDA         	movff	AutoSet@weld+1,fsr2h
  2785  000DE8  CFDE F02A          	movff	postinc2,??_AutoSet
  2786  000DEC  CFDD F02B          	movff	postdec2,??_AutoSet+1
  2787  000DF0  1E2A               	comf	??_AutoSet,f,c
  2788  000DF2  1E2B               	comf	??_AutoSet+1,f,c
  2789  000DF4  4A2A               	infsnz	??_AutoSet,f,c
  2790  000DF6  2A2B               	incf	??_AutoSet+1,f,c
  2791  000DF8  5055               	movf	_calm_state,w,c
  2792  000DFA  262A               	addwf	??_AutoSet,f,c
  2793  000DFC  5056               	movf	_calm_state+1,w,c
  2794  000DFE  222B               	addwfc	??_AutoSet+1,f,c
  2795  000E00  C028  FFD9         	movff	AutoSet@detect,fsr2l
  2796  000E04  C029  FFDA         	movff	AutoSet@detect+1,fsr2h
  2797  000E08  C02A  FFDE         	movff	??_AutoSet,postinc2
  2798  000E0C  C02B  FFDD         	movff	??_AutoSet+1,postdec2
  2799                           
  2800                           ;main.c: 366: calm_state[1] = prumer + offset;
  2801  000E10  505E               	movf	_offset,w,c
  2802  000E12  2433               	addwf	AutoSet@prumer,w,c
  2803  000E14  6E57               	movwf	_calm_state+2,c
  2804  000E16  0E00               	movlw	0
  2805  000E18  2034               	addwfc	AutoSet@prumer+1,w,c
  2806  000E1A  6E58               	movwf	_calm_state+3,c
  2807                           
  2808                           ;main.c: 367: detect[1] = calm_state[1] + *weld;
  2809  000E1C  C026  FFD9         	movff	AutoSet@weld,fsr2l
  2810  000E20  C027  FFDA         	movff	AutoSet@weld+1,fsr2h
  2811  000E24  CFDE F02A          	movff	postinc2,??_AutoSet
  2812  000E28  CFDD F02B          	movff	postdec2,??_AutoSet+1
  2813  000E2C  EE20  F057         	lfsr	2,_calm_state+2
  2814  000E30  CFDE F02C          	movff	postinc2,??_AutoSet+2
  2815  000E34  CFDD F02D          	movff	postdec2,??_AutoSet+3
  2816  000E38  502A               	movf	??_AutoSet,w,c
  2817  000E3A  262C               	addwf	??_AutoSet+2,f,c
  2818  000E3C  502B               	movf	??_AutoSet+1,w,c
  2819  000E3E  222D               	addwfc	??_AutoSet+3,f,c
  2820  000E40  EE20 F002          	lfsr	2,2
  2821  000E44  5028               	movf	AutoSet@detect,w,c
  2822  000E46  26D9               	addwf	fsr2l,f,c
  2823  000E48  5029               	movf	AutoSet@detect+1,w,c
  2824  000E4A  22DA               	addwfc	fsr2h,f,c
  2825  000E4C  C02C  FFDE         	movff	??_AutoSet+2,postinc2
  2826  000E50  C02D  FFDD         	movff	??_AutoSet+3,postdec2
  2827  000E54  0012               	return		;funcret
  2828  000E56                     __end_of_AutoSet:
  2829                           	opt stack 0
  2830                           tblptru	equ	0xFF8
  2831                           tblptrh	equ	0xFF7
  2832                           tblptrl	equ	0xFF6
  2833                           tablat	equ	0xFF5
  2834                           intcon	equ	0xFF2
  2835                           intcon2	equ	0xFF1
  2836                           postinc0	equ	0xFEE
  2837                           wreg	equ	0xFE8
  2838                           indf2	equ	0xFDF
  2839                           postinc2	equ	0xFDE
  2840                           postdec2	equ	0xFDD
  2841                           fsr2h	equ	0xFDA
  2842                           fsr2l	equ	0xFD9
  2843                           status	equ	0xFD8
  2844                           
  2845 ;; *************** function _Calibrate *****************
  2846 ;; Defined at:
  2847 ;;		line 380 in file "main.c"
  2848 ;; Parameters:    Size  Location     Type
  2849 ;;  analog          1    wreg     enum E6697
  2850 ;; Auto vars:     Size  Location     Type
  2851 ;;  analog          1   30[COMRAM] enum E6697
  2852 ;;  prumer          2   35[COMRAM] unsigned int 
  2853 ;;  max             2   33[COMRAM] unsigned int 
  2854 ;;  min             2   31[COMRAM] unsigned int 
  2855 ;;  table           2   28[COMRAM] unsigned char [2]
  2856 ;;  tmp             2    0        unsigned int 
  2857 ;;  result          2    0        unsigned int 
  2858 ;;  diff_2          1   27[COMRAM] unsigned char 
  2859 ;;  diff_1          1   26[COMRAM] unsigned char 
  2860 ;;  calib           1   25[COMRAM] unsigned char 
  2861 ;; Return value:  Size  Location     Type
  2862 ;;                  1    wreg      void 
  2863 ;; Registers used:
  2864 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2865 ;; Tracked objects:
  2866 ;;		On entry : 0/0
  2867 ;;		On exit  : 0/0
  2868 ;;		Unchanged: 0/0
  2869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2870 ;;      Params:         0       0       0       0       0       0       0
  2871 ;;      Locals:        12       0       0       0       0       0       0
  2872 ;;      Temps:          0       0       0       0       0       0       0
  2873 ;;      Totals:        12       0       0       0       0       0       0
  2874 ;;Total ram usage:       12 bytes
  2875 ;; Hardware stack levels used:    1
  2876 ;; Hardware stack levels required when called:    2
  2877 ;; This function calls:
  2878 ;;		_MinMax
  2879 ;;		_SendToSPI
  2880 ;; This function is called by:
  2881 ;;		_main
  2882 ;;		_AutoSet
  2883 ;; This function uses a non-reentrant model
  2884 ;;
  2885                           
  2886                           	psect	text20
  2887  000820                     __ptext20:
  2888                           	opt stack 0
  2889  000820                     _Calibrate:
  2890                           	opt stack 26
  2891                           
  2892                           ;incstack = 0
  2893                           ;Calibrate@analog stored from wreg
  2894  000820  6E1F               	movwf	Calibrate@analog,c
  2895                           
  2896                           ;main.c: 382: uint16_t result, tmp;
  2897                           ;main.c: 383: uint16_t min, max;
  2898                           ;main.c: 384: uint16_t prumer;
  2899                           ;main.c: 385: uint8_t diff_1 = 0;
  2900  000822  0E00               	movlw	0
  2901  000824  6E1B               	movwf	Calibrate@diff_1,c
  2902                           
  2903                           ;main.c: 386: uint8_t diff_2 = 0;
  2904  000826  0E00               	movlw	0
  2905  000828  6E1C               	movwf	Calibrate@diff_2,c
  2906                           
  2907                           ;main.c: 387: uint8_t table[2];
  2908                           ;main.c: 389: bool calib = 1;
  2909  00082A  0E01               	movlw	1
  2910  00082C  6E1A               	movwf	Calibrate@calib,c
  2911                           
  2912                           ;main.c: 391: analog = sonda_out;
  2913  00082E  0E00               	movlw	0
  2914  000830  6E1F               	movwf	Calibrate@analog,c
  2915                           
  2916                           ;main.c: 393: MinMax(analog, 10, &min, &max, &prumer);
  2917  000832  0E0A               	movlw	10
  2918  000834  6E09               	movwf	MinMax@count,c
  2919  000836  0E20               	movlw	low Calibrate@min
  2920  000838  6E0A               	movwf	MinMax@min,c
  2921  00083A  0E00               	movlw	high Calibrate@min
  2922  00083C  6E0B               	movwf	MinMax@min+1,c
  2923  00083E  0E22               	movlw	low Calibrate@max
  2924  000840  6E0C               	movwf	MinMax@max,c
  2925  000842  0E00               	movlw	high Calibrate@max
  2926  000844  6E0D               	movwf	MinMax@max+1,c
  2927  000846  0E24               	movlw	low Calibrate@prumer
  2928  000848  6E0E               	movwf	MinMax@prumer,c
  2929  00084A  0E00               	movlw	high Calibrate@prumer
  2930  00084C  6E0F               	movwf	MinMax@prumer+1,c
  2931  00084E  501F               	movf	Calibrate@analog,w,c
  2932  000850  EC0D  F006         	call	_MinMax
  2933                           
  2934                           ;main.c: 398: if (prumer == 627){
  2935  000854  0E73               	movlw	115
  2936  000856  1824               	xorwf	Calibrate@prumer,w,c
  2937  000858  E110               	bnz	l1797
  2938  00085A  0E02               	movlw	2
  2939  00085C  1825               	xorwf	Calibrate@prumer+1,w,c
  2940  00085E  A4D8               	btfss	status,2,c
  2941  000860  D00C               	goto	l393
  2942                           
  2943                           ;main.c: 399: readDA = 231;
  2944  000862  0EE7               	movlw	231
  2945  000864  6E5C               	movwf	_readDA,c
  2946                           
  2947                           ;main.c: 400: SendToSPI(readDA, &table);
  2948  000866  0E1D               	movlw	low Calibrate@table
  2949  000868  6E02               	movwf	SendToSPI@table,c
  2950  00086A  0E00               	movlw	high Calibrate@table
  2951  00086C  6E03               	movwf	SendToSPI@table+1,c
  2952  00086E  505C               	movf	_readDA,w,c
  2953  000870  ECB7  F007         	call	_SendToSPI
  2954                           
  2955                           ;main.c: 401: calib = 0;
  2956  000874  0E00               	movlw	0
  2957  000876  6E1A               	movwf	Calibrate@calib,c
  2958                           
  2959                           ;main.c: 403: }else if (prumer < 627){
  2960  000878  0012               	return	
  2961  00087A                     l393:
  2962  00087A                     l1797:
  2963  00087A  0E73               	movlw	115
  2964  00087C  5C24               	subwf	Calibrate@prumer,w,c
  2965  00087E  0E02               	movlw	2
  2966  000880  5825               	subwfb	Calibrate@prumer+1,w,c
  2967  000882  B0D8               	btfsc	status,0,c
  2968  000884  D067               	goto	l395
  2969                           
  2970                           ;main.c: 406: readDA = 231 + 3;
  2971  000886  0EEA               	movlw	234
  2972  000888  6E5C               	movwf	_readDA,c
  2973                           
  2974                           ;main.c: 407: SendToSPI(readDA, &table);
  2975  00088A  0E1D               	movlw	low Calibrate@table
  2976  00088C  6E02               	movwf	SendToSPI@table,c
  2977  00088E  0E00               	movlw	high Calibrate@table
  2978  000890  6E03               	movwf	SendToSPI@table+1,c
  2979  000892  505C               	movf	_readDA,w,c
  2980  000894  ECB7  F007         	call	_SendToSPI
  2981                           
  2982                           ;main.c: 408: analog = op_out;
  2983  000898  0E01               	movlw	1
  2984  00089A  6E1F               	movwf	Calibrate@analog,c
  2985                           
  2986                           ;main.c: 409: MinMax(analog, 10, &min, &max, &prumer);
  2987  00089C  0E0A               	movlw	10
  2988  00089E  6E09               	movwf	MinMax@count,c
  2989  0008A0  0E20               	movlw	low Calibrate@min
  2990  0008A2  6E0A               	movwf	MinMax@min,c
  2991  0008A4  0E00               	movlw	high Calibrate@min
  2992  0008A6  6E0B               	movwf	MinMax@min+1,c
  2993  0008A8  0E22               	movlw	low Calibrate@max
  2994  0008AA  6E0C               	movwf	MinMax@max,c
  2995  0008AC  0E00               	movlw	high Calibrate@max
  2996  0008AE  6E0D               	movwf	MinMax@max+1,c
  2997  0008B0  0E24               	movlw	low Calibrate@prumer
  2998  0008B2  6E0E               	movwf	MinMax@prumer,c
  2999  0008B4  0E00               	movlw	high Calibrate@prumer
  3000  0008B6  6E0F               	movwf	MinMax@prumer+1,c
  3001  0008B8  501F               	movf	Calibrate@analog,w,c
  3002  0008BA  EC0D  F006         	call	_MinMax
  3003  0008BE                     
  3004                           ;main.c: 412: if (prumer > 627){
  3005  0008BE  0E74               	movlw	116
  3006  0008C0  5C24               	subwf	Calibrate@prumer,w,c
  3007  0008C2  0E02               	movlw	2
  3008  0008C4  5825               	subwfb	Calibrate@prumer+1,w,c
  3009  0008C6  A0D8               	btfss	status,0,c
  3010  0008C8  D02B               	goto	l400
  3011                           
  3012                           ;main.c: 413: diff_1 = prumer - 627;
  3013  0008CA  5024               	movf	Calibrate@prumer,w,c
  3014  0008CC  0F8D               	addlw	141
  3015  0008CE  6E1B               	movwf	Calibrate@diff_1,c
  3016                           
  3017                           ;main.c: 414: readDA -= 1;
  3018  0008D0  065C               	decf	_readDA,f,c
  3019                           
  3020                           ;main.c: 415: SendToSPI(readDA, &table);
  3021  0008D2  0E1D               	movlw	low Calibrate@table
  3022  0008D4  6E02               	movwf	SendToSPI@table,c
  3023  0008D6  0E00               	movlw	high Calibrate@table
  3024  0008D8  6E03               	movwf	SendToSPI@table+1,c
  3025  0008DA  505C               	movf	_readDA,w,c
  3026  0008DC  ECB7  F007         	call	_SendToSPI
  3027                           
  3028                           ;main.c: 416: MinMax(analog, 10, &min, &max, &prumer);
  3029  0008E0  0E0A               	movlw	10
  3030  0008E2  6E09               	movwf	MinMax@count,c
  3031  0008E4  0E20               	movlw	low Calibrate@min
  3032  0008E6  6E0A               	movwf	MinMax@min,c
  3033  0008E8  0E00               	movlw	high Calibrate@min
  3034  0008EA  6E0B               	movwf	MinMax@min+1,c
  3035  0008EC  0E22               	movlw	low Calibrate@max
  3036  0008EE  6E0C               	movwf	MinMax@max,c
  3037  0008F0  0E00               	movlw	high Calibrate@max
  3038  0008F2  6E0D               	movwf	MinMax@max+1,c
  3039  0008F4  0E24               	movlw	low Calibrate@prumer
  3040  0008F6  6E0E               	movwf	MinMax@prumer,c
  3041  0008F8  0E00               	movlw	high Calibrate@prumer
  3042  0008FA  6E0F               	movwf	MinMax@prumer+1,c
  3043  0008FC  501F               	movf	Calibrate@analog,w,c
  3044  0008FE  EC0D  F006         	call	_MinMax
  3045                           
  3046                           ;main.c: 417: if (prumer < 627){
  3047  000902  0E73               	movlw	115
  3048  000904  5C24               	subwf	Calibrate@prumer,w,c
  3049  000906  0E02               	movlw	2
  3050  000908  5825               	subwfb	Calibrate@prumer+1,w,c
  3051  00090A  B0D8               	btfsc	status,0,c
  3052  00090C  D009               	goto	l400
  3053                           
  3054                           ;main.c: 418: diff_2 = 627 - prumer;
  3055  00090E  5024               	movf	Calibrate@prumer,w,c
  3056  000910  0800               	sublw	0
  3057  000912  0F73               	addlw	115
  3058  000914  6E1C               	movwf	Calibrate@diff_2,c
  3059                           
  3060                           ;main.c: 419: if (diff_1 < diff_2) readDA += 1;
  3061  000916  501C               	movf	Calibrate@diff_2,w,c
  3062  000918  5C1B               	subwf	Calibrate@diff_1,w,c
  3063  00091A  B0D8               	btfsc	status,0,c
  3064  00091C  D018               	goto	u840
  3065  00091E  2A5C               	incf	_readDA,f,c
  3066  000920                     l400:
  3067                           
  3068                           ;main.c: 421: }
  3069                           ;main.c: 422: }
  3070                           ;main.c: 423: MinMax(analog, 10, &min, &max, &prumer);
  3071  000920  0E0A               	movlw	10
  3072  000922  6E09               	movwf	MinMax@count,c
  3073  000924  0E20               	movlw	low Calibrate@min
  3074  000926  6E0A               	movwf	MinMax@min,c
  3075  000928  0E00               	movlw	high Calibrate@min
  3076  00092A  6E0B               	movwf	MinMax@min+1,c
  3077  00092C  0E22               	movlw	low Calibrate@max
  3078  00092E  6E0C               	movwf	MinMax@max,c
  3079  000930  0E00               	movlw	high Calibrate@max
  3080  000932  6E0D               	movwf	MinMax@max+1,c
  3081  000934  0E24               	movlw	low Calibrate@prumer
  3082  000936  6E0E               	movwf	MinMax@prumer,c
  3083  000938  0E00               	movlw	high Calibrate@prumer
  3084  00093A  6E0F               	movwf	MinMax@prumer+1,c
  3085  00093C  501F               	movf	Calibrate@analog,w,c
  3086  00093E  EC0D  F006         	call	_MinMax
  3087                           
  3088                           ;main.c: 425: }while(prumer >= 627);
  3089  000942  0E73               	movlw	115
  3090  000944  5C24               	subwf	Calibrate@prumer,w,c
  3091  000946  0E02               	movlw	2
  3092  000948  5825               	subwfb	Calibrate@prumer+1,w,c
  3093  00094A  B0D8               	btfsc	status,0,c
  3094  00094C  D7B8               	goto	l396
  3095  00094E                     u840:
  3096                           
  3097                           ;main.c: 426: calib = 0;
  3098  00094E  0E00               	movlw	0
  3099  000950  6E1A               	movwf	Calibrate@calib,c
  3100                           
  3101                           ;main.c: 428: }else if (prumer > 627){
  3102  000952  0012               	return	
  3103  000954                     l395:
  3104  000954  0E74               	movlw	116
  3105  000956  5C24               	subwf	Calibrate@prumer,w,c
  3106  000958  0E02               	movlw	2
  3107  00095A  5825               	subwfb	Calibrate@prumer+1,w,c
  3108  00095C  A0D8               	btfss	status,0,c
  3109  00095E  0012               	return	
  3110                           
  3111                           ;main.c: 430: readDA = 231 - 3;
  3112  000960  0EE4               	movlw	228
  3113  000962  6E5C               	movwf	_readDA,c
  3114                           
  3115                           ;main.c: 431: SendToSPI(readDA, &table);
  3116  000964  0E1D               	movlw	low Calibrate@table
  3117  000966  6E02               	movwf	SendToSPI@table,c
  3118  000968  0E00               	movlw	high Calibrate@table
  3119  00096A  6E03               	movwf	SendToSPI@table+1,c
  3120  00096C  505C               	movf	_readDA,w,c
  3121  00096E  ECB7  F007         	call	_SendToSPI
  3122                           
  3123                           ;main.c: 432: analog = op_out;
  3124  000972  0E01               	movlw	1
  3125  000974  6E1F               	movwf	Calibrate@analog,c
  3126                           
  3127                           ;main.c: 433: MinMax(analog, 10, &min, &max, &prumer);
  3128  000976  0E0A               	movlw	10
  3129  000978  6E09               	movwf	MinMax@count,c
  3130  00097A  0E20               	movlw	low Calibrate@min
  3131  00097C  6E0A               	movwf	MinMax@min,c
  3132  00097E  0E00               	movlw	high Calibrate@min
  3133  000980  6E0B               	movwf	MinMax@min+1,c
  3134  000982  0E22               	movlw	low Calibrate@max
  3135  000984  6E0C               	movwf	MinMax@max,c
  3136  000986  0E00               	movlw	high Calibrate@max
  3137  000988  6E0D               	movwf	MinMax@max+1,c
  3138  00098A  0E24               	movlw	low Calibrate@prumer
  3139  00098C  6E0E               	movwf	MinMax@prumer,c
  3140  00098E  0E00               	movlw	high Calibrate@prumer
  3141  000990  6E0F               	movwf	MinMax@prumer+1,c
  3142  000992  501F               	movf	Calibrate@analog,w,c
  3143  000994  EC0D  F006         	call	_MinMax
  3144  000998                     l404:
  3145                           
  3146                           ;main.c: 436: MinMax(analog, 10, &min, &max, &prumer);
  3147  000998  0E0A               	movlw	10
  3148  00099A  6E09               	movwf	MinMax@count,c
  3149  00099C  0E20               	movlw	low Calibrate@min
  3150  00099E  6E0A               	movwf	MinMax@min,c
  3151  0009A0  0E00               	movlw	high Calibrate@min
  3152  0009A2  6E0B               	movwf	MinMax@min+1,c
  3153  0009A4  0E22               	movlw	low Calibrate@max
  3154  0009A6  6E0C               	movwf	MinMax@max,c
  3155  0009A8  0E00               	movlw	high Calibrate@max
  3156  0009AA  6E0D               	movwf	MinMax@max+1,c
  3157  0009AC  0E24               	movlw	low Calibrate@prumer
  3158  0009AE  6E0E               	movwf	MinMax@prumer,c
  3159  0009B0  0E00               	movlw	high Calibrate@prumer
  3160  0009B2  6E0F               	movwf	MinMax@prumer+1,c
  3161  0009B4  501F               	movf	Calibrate@analog,w,c
  3162  0009B6  EC0D  F006         	call	_MinMax
  3163                           
  3164                           ;main.c: 438: if (prumer < 627){
  3165  0009BA  0E73               	movlw	115
  3166  0009BC  5C24               	subwf	Calibrate@prumer,w,c
  3167  0009BE  0E02               	movlw	2
  3168  0009C0  5825               	subwfb	Calibrate@prumer+1,w,c
  3169  0009C2  B0D8               	btfsc	status,0,c
  3170  0009C4  D02B               	goto	l408
  3171                           
  3172                           ;main.c: 439: diff_1 = 627 - prumer;
  3173  0009C6  5024               	movf	Calibrate@prumer,w,c
  3174  0009C8  0800               	sublw	0
  3175  0009CA  0F73               	addlw	115
  3176  0009CC  6E1B               	movwf	Calibrate@diff_1,c
  3177                           
  3178                           ;main.c: 440: readDA += 1;
  3179  0009CE  2A5C               	incf	_readDA,f,c
  3180                           
  3181                           ;main.c: 441: SendToSPI(readDA, &table);
  3182  0009D0  0E1D               	movlw	low Calibrate@table
  3183  0009D2  6E02               	movwf	SendToSPI@table,c
  3184  0009D4  0E00               	movlw	high Calibrate@table
  3185  0009D6  6E03               	movwf	SendToSPI@table+1,c
  3186  0009D8  505C               	movf	_readDA,w,c
  3187  0009DA  ECB7  F007         	call	_SendToSPI
  3188                           
  3189                           ;main.c: 442: MinMax(analog, 10, &min, &max, &prumer);
  3190  0009DE  0E0A               	movlw	10
  3191  0009E0  6E09               	movwf	MinMax@count,c
  3192  0009E2  0E20               	movlw	low Calibrate@min
  3193  0009E4  6E0A               	movwf	MinMax@min,c
  3194  0009E6  0E00               	movlw	high Calibrate@min
  3195  0009E8  6E0B               	movwf	MinMax@min+1,c
  3196  0009EA  0E22               	movlw	low Calibrate@max
  3197  0009EC  6E0C               	movwf	MinMax@max,c
  3198  0009EE  0E00               	movlw	high Calibrate@max
  3199  0009F0  6E0D               	movwf	MinMax@max+1,c
  3200  0009F2  0E24               	movlw	low Calibrate@prumer
  3201  0009F4  6E0E               	movwf	MinMax@prumer,c
  3202  0009F6  0E00               	movlw	high Calibrate@prumer
  3203  0009F8  6E0F               	movwf	MinMax@prumer+1,c
  3204  0009FA  501F               	movf	Calibrate@analog,w,c
  3205  0009FC  EC0D  F006         	call	_MinMax
  3206                           
  3207                           ;main.c: 443: if (prumer > 627){
  3208  000A00  0E74               	movlw	116
  3209  000A02  5C24               	subwf	Calibrate@prumer,w,c
  3210  000A04  0E02               	movlw	2
  3211  000A06  5825               	subwfb	Calibrate@prumer+1,w,c
  3212  000A08  A0D8               	btfss	status,0,c
  3213  000A0A  D008               	goto	l408
  3214                           
  3215                           ;main.c: 444: diff_2 = prumer - 627;
  3216  000A0C  5024               	movf	Calibrate@prumer,w,c
  3217  000A0E  0F8D               	addlw	141
  3218  000A10  6E1C               	movwf	Calibrate@diff_2,c
  3219                           
  3220                           ;main.c: 445: if (diff_1 < diff_2) readDA -= 1;
  3221  000A12  501C               	movf	Calibrate@diff_2,w,c
  3222  000A14  5C1B               	subwf	Calibrate@diff_1,w,c
  3223  000A16  B0D8               	btfsc	status,0,c
  3224  000A18  D007               	goto	u890
  3225  000A1A  065C               	decf	_readDA,f,c
  3226  000A1C                     l408:
  3227                           
  3228                           ;main.c: 447: }
  3229                           ;main.c: 448: }
  3230                           ;main.c: 451: }while(prumer <= 627);
  3231  000A1C  0E74               	movlw	116
  3232  000A1E  5C24               	subwf	Calibrate@prumer,w,c
  3233  000A20  0E02               	movlw	2
  3234  000A22  5825               	subwfb	Calibrate@prumer+1,w,c
  3235  000A24  A0D8               	btfss	status,0,c
  3236  000A26  D7B8               	goto	l404
  3237  000A28                     u890:
  3238                           
  3239                           ;main.c: 452: calib = 0;
  3240  000A28  0E00               	movlw	0
  3241  000A2A  6E1A               	movwf	Calibrate@calib,c
  3242  000A2C  0012               	return	
  3243  000A2E                     __end_of_Calibrate:
  3244                           	opt stack 0
  3245                           tblptru	equ	0xFF8
  3246                           tblptrh	equ	0xFF7
  3247                           tblptrl	equ	0xFF6
  3248                           tablat	equ	0xFF5
  3249                           intcon	equ	0xFF2
  3250                           intcon2	equ	0xFF1
  3251                           postinc0	equ	0xFEE
  3252                           wreg	equ	0xFE8
  3253                           indf2	equ	0xFDF
  3254                           postinc2	equ	0xFDE
  3255                           postdec2	equ	0xFDD
  3256                           fsr2h	equ	0xFDA
  3257                           fsr2l	equ	0xFD9
  3258                           status	equ	0xFD8
  3259                           
  3260 ;; *************** function _SendToSPI *****************
  3261 ;; Defined at:
  3262 ;;		line 459 in file "main.c"
  3263 ;; Parameters:    Size  Location     Type
  3264 ;;  value           1    wreg     unsigned char 
  3265 ;;  table           2    1[COMRAM] PTR unsigned char 
  3266 ;;		 -> Calibrate@table(2), main@spiBuffer(2), 
  3267 ;; Auto vars:     Size  Location     Type
  3268 ;;  value           1    8[COMRAM] unsigned char 
  3269 ;;  tmpH            1    7[COMRAM] unsigned char 
  3270 ;;  tmpL            1    6[COMRAM] unsigned char 
  3271 ;;  set             1    5[COMRAM] unsigned char 
  3272 ;;  total           1    4[COMRAM] unsigned char 
  3273 ;; Return value:  Size  Location     Type
  3274 ;;                  1    wreg      void 
  3275 ;; Registers used:
  3276 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3277 ;; Tracked objects:
  3278 ;;		On entry : 0/0
  3279 ;;		On exit  : 0/0
  3280 ;;		Unchanged: 0/0
  3281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3282 ;;      Params:         2       0       0       0       0       0       0
  3283 ;;      Locals:         5       0       0       0       0       0       0
  3284 ;;      Temps:          1       0       0       0       0       0       0
  3285 ;;      Totals:         8       0       0       0       0       0       0
  3286 ;;Total ram usage:        8 bytes
  3287 ;; Hardware stack levels used:    1
  3288 ;; Hardware stack levels required when called:    1
  3289 ;; This function calls:
  3290 ;;		_SPI1_Exchange8bit
  3291 ;; This function is called by:
  3292 ;;		_main
  3293 ;;		_Calibrate
  3294 ;; This function uses a non-reentrant model
  3295 ;;
  3296                           
  3297                           	psect	text21
  3298  000F6E                     __ptext21:
  3299                           	opt stack 0
  3300  000F6E                     _SendToSPI:
  3301                           	opt stack 29
  3302                           
  3303                           ;incstack = 0
  3304                           ;SendToSPI@value stored from wreg
  3305  000F6E  6E09               	movwf	SendToSPI@value,c
  3306                           
  3307                           ;main.c: 462: do { LATCbits.LATC2 = 0; } while(0);
  3308  000F70  948B               	bcf	3979,2,c	;volatile
  3309                           
  3310                           ;main.c: 463: _delay((unsigned long)((3)*(64000000/4000.0)));
  3311  000F72  0E3F               	movlw	63
  3312  000F74  6E04               	movwf	??_SendToSPI& (0+255),c
  3313  000F76  0E55               	movlw	85
  3314  000F78                     u1237:
  3315  000F78  2EE8               	decfsz	wreg,f,c
  3316  000F7A  D7FE               	bra	u1237
  3317  000F7C  2E04               	decfsz	??_SendToSPI& (0+255),f,c
  3318  000F7E  D7FC               	bra	u1237
  3319  000F80  F000               	nop	
  3320                           
  3321                           ;main.c: 464: uint8_t set = 0x30;
  3322  000F82  0E30               	movlw	48
  3323  000F84  6E06               	movwf	SendToSPI@set,c
  3324                           
  3325                           ;main.c: 465: uint8_t tmpL, tmpH;
  3326                           ;main.c: 466: uint8_t total = 0;
  3327  000F86  0E00               	movlw	0
  3328  000F88  6E05               	movwf	SendToSPI@total,c
  3329                           
  3330                           ;main.c: 467: tmpH = value >> 4;
  3331  000F8A  3809               	swapf	SendToSPI@value,w,c
  3332  000F8C  0B0F               	andlw	15
  3333  000F8E  6E08               	movwf	SendToSPI@tmpH,c
  3334                           
  3335                           ;main.c: 468: tmpH += set;
  3336  000F90  5006               	movf	SendToSPI@set,w,c
  3337  000F92  2608               	addwf	SendToSPI@tmpH,f,c
  3338                           
  3339                           ;main.c: 469: tmpL = value << 4;
  3340  000F94  3809               	swapf	SendToSPI@value,w,c
  3341  000F96  0BF0               	andlw	240
  3342  000F98  6E07               	movwf	SendToSPI@tmpL,c
  3343                           
  3344                           ;main.c: 470: table[1] = tmpH;
  3345  000F9A  EE20 F001          	lfsr	2,1
  3346  000F9E  5002               	movf	SendToSPI@table,w,c
  3347  000FA0  26D9               	addwf	fsr2l,f,c
  3348  000FA2  5003               	movf	SendToSPI@table+1,w,c
  3349  000FA4  22DA               	addwfc	fsr2h,f,c
  3350  000FA6  C008  FFDF         	movff	SendToSPI@tmpH,indf2
  3351                           
  3352                           ;main.c: 471: table[0] = tmpL;
  3353  000FAA  C002  FFD9         	movff	SendToSPI@table,fsr2l
  3354  000FAE  C003  FFDA         	movff	SendToSPI@table+1,fsr2h
  3355  000FB2  C007  FFDF         	movff	SendToSPI@tmpL,indf2
  3356                           
  3357                           ;main.c: 472: SPI1_Exchange8bit(table[1]);
  3358  000FB6  EE20 F001          	lfsr	2,1
  3359  000FBA  5002               	movf	SendToSPI@table,w,c
  3360  000FBC  26D9               	addwf	fsr2l,f,c
  3361  000FBE  5003               	movf	SendToSPI@table+1,w,c
  3362  000FC0  22DA               	addwfc	fsr2h,f,c
  3363  000FC2  50DF               	movf	indf2,w,c
  3364  000FC4  ECC8  F008         	call	_SPI1_Exchange8bit
  3365                           
  3366                           ;main.c: 473: SPI1_Exchange8bit(table[0]);
  3367  000FC8  C002  FFD9         	movff	SendToSPI@table,fsr2l
  3368  000FCC  C003  FFDA         	movff	SendToSPI@table+1,fsr2h
  3369  000FD0  50DF               	movf	indf2,w,c
  3370  000FD2  ECC8  F008         	call	_SPI1_Exchange8bit
  3371                           
  3372                           ;main.c: 474: do { LATCbits.LATC2 = 1; } while(0);
  3373  000FD6  848B               	bsf	3979,2,c	;volatile
  3374  000FD8  0012               	return	
  3375  000FDA                     __end_of_SendToSPI:
  3376                           	opt stack 0
  3377                           tblptru	equ	0xFF8
  3378                           tblptrh	equ	0xFF7
  3379                           tblptrl	equ	0xFF6
  3380                           tablat	equ	0xFF5
  3381                           intcon	equ	0xFF2
  3382                           intcon2	equ	0xFF1
  3383                           postinc0	equ	0xFEE
  3384                           wreg	equ	0xFE8
  3385                           indf2	equ	0xFDF
  3386                           postinc2	equ	0xFDE
  3387                           postdec2	equ	0xFDD
  3388                           fsr2h	equ	0xFDA
  3389                           fsr2l	equ	0xFD9
  3390                           status	equ	0xFD8
  3391                           
  3392 ;; *************** function _SPI1_Exchange8bit *****************
  3393 ;; Defined at:
  3394 ;;		line 77 in file "mcc_generated_files/spi1.c"
  3395 ;; Parameters:    Size  Location     Type
  3396 ;;  data            1    wreg     unsigned char 
  3397 ;; Auto vars:     Size  Location     Type
  3398 ;;  data            1    0[COMRAM] unsigned char 
  3399 ;; Return value:  Size  Location     Type
  3400 ;;                  1    wreg      unsigned char 
  3401 ;; Registers used:
  3402 ;;		wreg, status,2
  3403 ;; Tracked objects:
  3404 ;;		On entry : 0/0
  3405 ;;		On exit  : 0/0
  3406 ;;		Unchanged: 0/0
  3407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3408 ;;      Params:         0       0       0       0       0       0       0
  3409 ;;      Locals:         1       0       0       0       0       0       0
  3410 ;;      Temps:          0       0       0       0       0       0       0
  3411 ;;      Totals:         1       0       0       0       0       0       0
  3412 ;;Total ram usage:        1 bytes
  3413 ;; Hardware stack levels used:    1
  3414 ;; This function calls:
  3415 ;;		Nothing
  3416 ;; This function is called by:
  3417 ;;		_SendToSPI
  3418 ;;		_SPI1_Exchange8bitBuffer
  3419 ;; This function uses a non-reentrant model
  3420 ;;
  3421                           
  3422                           	psect	text22
  3423  001190                     __ptext22:
  3424                           	opt stack 0
  3425  001190                     _SPI1_Exchange8bit:
  3426                           	opt stack 29
  3427                           
  3428                           ;incstack = 0
  3429                           ;SPI1_Exchange8bit@data stored from wreg
  3430  001190  6E01               	movwf	SPI1_Exchange8bit@data,c
  3431                           
  3432                           ;spi1.c: 80: SSP1CON1bits.WCOL = 0;
  3433  001192  9EC6               	bcf	4038,7,c	;volatile
  3434                           
  3435                           ;spi1.c: 82: SSP1BUF = data;
  3436  001194  C001  FFC9         	movff	SPI1_Exchange8bit@data,4041	;volatile
  3437  001198                     
  3438                           ;spi1.c: 85: {
  3439  001198  A0C7               	btfss	4039,0,c	;volatile
  3440  00119A  D7FE               	goto	l156
  3441                           
  3442                           ;spi1.c: 86: }
  3443                           ;spi1.c: 88: return (SSP1BUF);
  3444  00119C  50C9               	movf	4041,w,c	;volatile
  3445  00119E  0012               	return		;funcret
  3446  0011A0                     __end_of_SPI1_Exchange8bit:
  3447                           	opt stack 0
  3448                           tblptru	equ	0xFF8
  3449                           tblptrh	equ	0xFF7
  3450                           tblptrl	equ	0xFF6
  3451                           tablat	equ	0xFF5
  3452                           intcon	equ	0xFF2
  3453                           intcon2	equ	0xFF1
  3454                           postinc0	equ	0xFEE
  3455                           wreg	equ	0xFE8
  3456                           indf2	equ	0xFDF
  3457                           postinc2	equ	0xFDE
  3458                           postdec2	equ	0xFDD
  3459                           fsr2h	equ	0xFDA
  3460                           fsr2l	equ	0xFD9
  3461                           status	equ	0xFD8
  3462                           
  3463 ;; *************** function _MinMax *****************
  3464 ;; Defined at:
  3465 ;;		line 478 in file "main.c"
  3466 ;; Parameters:    Size  Location     Type
  3467 ;;  analog          1    wreg     enum E6697
  3468 ;;  count           1    8[COMRAM] unsigned char 
  3469 ;;  min             2    9[COMRAM] PTR unsigned int 
  3470 ;;		 -> Calibrate@min(2), AutoSet@min(2), 
  3471 ;;  max             2   11[COMRAM] PTR unsigned int 
  3472 ;;		 -> Calibrate@max(2), AutoSet@max(2), 
  3473 ;;  prumer          2   13[COMRAM] PTR unsigned int 
  3474 ;;		 -> Calibrate@prumer(2), AutoSet@prumer(2), 
  3475 ;; Auto vars:     Size  Location     Type
  3476 ;;  analog          1   18[COMRAM] enum E6697
  3477 ;;  result          2   23[COMRAM] unsigned int 
  3478 ;;  i               2   21[COMRAM] int 
  3479 ;;  tmp             2   19[COMRAM] int 
  3480 ;; Return value:  Size  Location     Type
  3481 ;;                  1    wreg      void 
  3482 ;; Registers used:
  3483 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3484 ;; Tracked objects:
  3485 ;;		On entry : 0/0
  3486 ;;		On exit  : 0/0
  3487 ;;		Unchanged: 0/0
  3488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3489 ;;      Params:         7       0       0       0       0       0       0
  3490 ;;      Locals:         7       0       0       0       0       0       0
  3491 ;;      Temps:          3       0       0       0       0       0       0
  3492 ;;      Totals:        17       0       0       0       0       0       0
  3493 ;;Total ram usage:       17 bytes
  3494 ;; Hardware stack levels used:    1
  3495 ;; Hardware stack levels required when called:    1
  3496 ;; This function calls:
  3497 ;;		_ADC_GetConversion
  3498 ;;		_ProbeDelay
  3499 ;;		___awdiv
  3500 ;; This function is called by:
  3501 ;;		_AutoSet
  3502 ;;		_Calibrate
  3503 ;; This function uses a non-reentrant model
  3504 ;;
  3505                           
  3506                           	psect	text23
  3507  000C1A                     __ptext23:
  3508                           	opt stack 0
  3509  000C1A                     _MinMax:
  3510                           	opt stack 27
  3511                           
  3512                           ;incstack = 0
  3513                           ;MinMax@analog stored from wreg
  3514  000C1A  6E13               	movwf	MinMax@analog,c
  3515                           
  3516                           ;main.c: 480: int i;
  3517                           ;main.c: 481: *min = 0;
  3518  000C1C  C00A  FFD9         	movff	MinMax@min,fsr2l
  3519  000C20  C00B  FFDA         	movff	MinMax@min+1,fsr2h
  3520  000C24  0E00               	movlw	0
  3521  000C26  6EDE               	movwf	postinc2,c
  3522  000C28  0E00               	movlw	0
  3523  000C2A  6EDD               	movwf	postdec2,c
  3524                           
  3525                           ;main.c: 482: *max = 0;
  3526  000C2C  C00C  FFD9         	movff	MinMax@max,fsr2l
  3527  000C30  C00D  FFDA         	movff	MinMax@max+1,fsr2h
  3528  000C34  0E00               	movlw	0
  3529  000C36  6EDE               	movwf	postinc2,c
  3530  000C38  0E00               	movlw	0
  3531  000C3A  6EDD               	movwf	postdec2,c
  3532                           
  3533                           ;main.c: 483: *prumer = 0;
  3534  000C3C  C00E  FFD9         	movff	MinMax@prumer,fsr2l
  3535  000C40  C00F  FFDA         	movff	MinMax@prumer+1,fsr2h
  3536  000C44  0E00               	movlw	0
  3537  000C46  6EDE               	movwf	postinc2,c
  3538  000C48  0E00               	movlw	0
  3539  000C4A  6EDD               	movwf	postdec2,c
  3540                           
  3541                           ;main.c: 484: ProbeDelay(1);
  3542  000C4C  0E01               	movlw	1
  3543  000C4E  EC63  F008         	call	_ProbeDelay
  3544                           
  3545                           ;main.c: 485: uint16_t result = 0;
  3546  000C52  0E00               	movlw	0
  3547  000C54  6E19               	movwf	MinMax@result+1,c
  3548  000C56  0E00               	movlw	0
  3549  000C58  6E18               	movwf	MinMax@result,c
  3550                           
  3551                           ;main.c: 486: int tmp = 0;
  3552  000C5A  0E00               	movlw	0
  3553  000C5C  6E15               	movwf	MinMax@tmp+1,c
  3554  000C5E  0E00               	movlw	0
  3555  000C60  6E14               	movwf	MinMax@tmp,c
  3556                           
  3557                           ;main.c: 487: for (i = 0; i < count; i++){
  3558  000C62  0E00               	movlw	0
  3559  000C64  6E17               	movwf	MinMax@i+1,c
  3560  000C66  0E00               	movlw	0
  3561  000C68  6E16               	movwf	MinMax@i,c
  3562  000C6A  D048               	goto	l420
  3563  000C6C                     
  3564                           ;main.c: 488: result = ADC_GetConversion(analog);
  3565  000C6C  5013               	movf	MinMax@analog,w,c
  3566  000C6E  EC0A  F008         	call	_ADC_GetConversion
  3567  000C72  C001  F018         	movff	?_ADC_GetConversion,MinMax@result
  3568  000C76  C002  F019         	movff	?_ADC_GetConversion+1,MinMax@result+1
  3569                           
  3570                           ;main.c: 489: if (i == 0){
  3571  000C7A  5016               	movf	MinMax@i,w,c
  3572  000C7C  1017               	iorwf	MinMax@i+1,w,c
  3573  000C7E  A4D8               	btfss	status,2,c
  3574  000C80  D010               	goto	l422
  3575                           
  3576                           ;main.c: 490: *min = result;
  3577  000C82  C00A  FFD9         	movff	MinMax@min,fsr2l
  3578  000C86  C00B  FFDA         	movff	MinMax@min+1,fsr2h
  3579  000C8A  C018  FFDE         	movff	MinMax@result,postinc2
  3580  000C8E  C019  FFDD         	movff	MinMax@result+1,postdec2
  3581                           
  3582                           ;main.c: 491: *max = result;
  3583  000C92  C00C  FFD9         	movff	MinMax@max,fsr2l
  3584  000C96  C00D  FFDA         	movff	MinMax@max+1,fsr2h
  3585  000C9A  C018  FFDE         	movff	MinMax@result,postinc2
  3586  000C9E  C019  FFDD         	movff	MinMax@result+1,postdec2
  3587  000CA2                     l422:
  3588                           
  3589                           ;main.c: 492: }
  3590                           ;main.c: 494: ProbeDelay(1);
  3591  000CA2  0E01               	movlw	1
  3592  000CA4  EC63  F008         	call	_ProbeDelay
  3593                           
  3594                           ;main.c: 495: tmp += result;
  3595  000CA8  5018               	movf	MinMax@result,w,c
  3596  000CAA  2614               	addwf	MinMax@tmp,f,c
  3597  000CAC  5019               	movf	MinMax@result+1,w,c
  3598  000CAE  2215               	addwfc	MinMax@tmp+1,f,c
  3599                           
  3600                           ;main.c: 496: if (result < *min) { *min = result;}
  3601  000CB0  C00A  FFD9         	movff	MinMax@min,fsr2l
  3602  000CB4  C00B  FFDA         	movff	MinMax@min+1,fsr2h
  3603  000CB8  50DE               	movf	postinc2,w,c
  3604  000CBA  5C18               	subwf	MinMax@result,w,c
  3605  000CBC  50DE               	movf	postinc2,w,c
  3606  000CBE  5819               	subwfb	MinMax@result+1,w,c
  3607  000CC0  B0D8               	btfsc	status,0,c
  3608  000CC2  D008               	goto	l423
  3609  000CC4  C00A  FFD9         	movff	MinMax@min,fsr2l
  3610  000CC8  C00B  FFDA         	movff	MinMax@min+1,fsr2h
  3611  000CCC  C018  FFDE         	movff	MinMax@result,postinc2
  3612  000CD0  C019  FFDD         	movff	MinMax@result+1,postdec2
  3613  000CD4                     l423:
  3614                           
  3615                           ;main.c: 497: if (result > *max) { *max = result;}
  3616  000CD4  C00C  FFD9         	movff	MinMax@max,fsr2l
  3617  000CD8  C00D  FFDA         	movff	MinMax@max+1,fsr2h
  3618  000CDC  5018               	movf	MinMax@result,w,c
  3619  000CDE  5CDE               	subwf	postinc2,w,c
  3620  000CE0  5019               	movf	MinMax@result+1,w,c
  3621  000CE2  58DE               	subwfb	postinc2,w,c
  3622  000CE4  B0D8               	btfsc	status,0,c
  3623  000CE6  D008               	goto	l424
  3624  000CE8  C00C  FFD9         	movff	MinMax@max,fsr2l
  3625  000CEC  C00D  FFDA         	movff	MinMax@max+1,fsr2h
  3626  000CF0  C018  FFDE         	movff	MinMax@result,postinc2
  3627  000CF4  C019  FFDD         	movff	MinMax@result+1,postdec2
  3628  000CF8                     l424:
  3629  000CF8  4A16               	infsnz	MinMax@i,f,c
  3630  000CFA  2A17               	incf	MinMax@i+1,f,c
  3631  000CFC                     l420:
  3632  000CFC  5009               	movf	MinMax@count,w,c
  3633  000CFE  6E10               	movwf	??_MinMax& (0+255),c
  3634  000D00  6A11               	clrf	(??_MinMax+1)& (0+255),c
  3635  000D02  5010               	movf	??_MinMax,w,c
  3636  000D04  5C16               	subwf	MinMax@i,w,c
  3637  000D06  5017               	movf	MinMax@i+1,w,c
  3638  000D08  0A80               	xorlw	128
  3639  000D0A  6E12               	movwf	(??_MinMax+2)& (0+255),c
  3640  000D0C  5011               	movf	??_MinMax+1,w,c
  3641  000D0E  0A80               	xorlw	128
  3642  000D10  5812               	subwfb	(??_MinMax+2)& (0+255),w,c
  3643  000D12  A0D8               	btfss	status,0,c
  3644  000D14  D7AB               	goto	l421
  3645                           
  3646                           ;main.c: 498: }
  3647                           ;main.c: 499: *prumer = tmp / count;
  3648  000D16  C014  F001         	movff	MinMax@tmp,___awdiv@dividend
  3649  000D1A  C015  F002         	movff	MinMax@tmp+1,___awdiv@dividend+1
  3650  000D1E  C009  F003         	movff	MinMax@count,___awdiv@divisor
  3651  000D22  6A04               	clrf	___awdiv@divisor+1,c
  3652  000D24  EC75  F007         	call	___awdiv	;wreg free
  3653  000D28  C00E  FFD9         	movff	MinMax@prumer,fsr2l
  3654  000D2C  C00F  FFDA         	movff	MinMax@prumer+1,fsr2h
  3655  000D30  C001  FFDE         	movff	?___awdiv,postinc2
  3656  000D34  C002  FFDD         	movff	?___awdiv+1,postdec2
  3657  000D38  0012               	return		;funcret
  3658  000D3A                     __end_of_MinMax:
  3659                           	opt stack 0
  3660                           tblptru	equ	0xFF8
  3661                           tblptrh	equ	0xFF7
  3662                           tblptrl	equ	0xFF6
  3663                           tablat	equ	0xFF5
  3664                           intcon	equ	0xFF2
  3665                           intcon2	equ	0xFF1
  3666                           postinc0	equ	0xFEE
  3667                           wreg	equ	0xFE8
  3668                           indf2	equ	0xFDF
  3669                           postinc2	equ	0xFDE
  3670                           postdec2	equ	0xFDD
  3671                           fsr2h	equ	0xFDA
  3672                           fsr2l	equ	0xFD9
  3673                           status	equ	0xFD8
  3674                           
  3675 ;; *************** function ___awdiv *****************
  3676 ;; Defined at:
  3677 ;;		line 8 in file "/opt/microchip/xc8/v1.44/sources/common/awdiv.c"
  3678 ;; Parameters:    Size  Location     Type
  3679 ;;  dividend        2    0[COMRAM] int 
  3680 ;;  divisor         2    2[COMRAM] int 
  3681 ;; Auto vars:     Size  Location     Type
  3682 ;;  quotient        2    6[COMRAM] int 
  3683 ;;  sign            1    5[COMRAM] unsigned char 
  3684 ;;  counter         1    4[COMRAM] unsigned char 
  3685 ;; Return value:  Size  Location     Type
  3686 ;;                  2    0[COMRAM] int 
  3687 ;; Registers used:
  3688 ;;		wreg, status,2, status,0
  3689 ;; Tracked objects:
  3690 ;;		On entry : 0/0
  3691 ;;		On exit  : 0/0
  3692 ;;		Unchanged: 0/0
  3693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3694 ;;      Params:         4       0       0       0       0       0       0
  3695 ;;      Locals:         4       0       0       0       0       0       0
  3696 ;;      Temps:          0       0       0       0       0       0       0
  3697 ;;      Totals:         8       0       0       0       0       0       0
  3698 ;;Total ram usage:        8 bytes
  3699 ;; Hardware stack levels used:    1
  3700 ;; This function calls:
  3701 ;;		Nothing
  3702 ;; This function is called by:
  3703 ;;		_MinMax
  3704 ;; This function uses a non-reentrant model
  3705 ;;
  3706                           
  3707                           	psect	text24
  3708  000EEA                     __ptext24:
  3709                           	opt stack 0
  3710  000EEA                     ___awdiv:
  3711                           	opt stack 27
  3712                           
  3713                           ;incstack = 0
  3714  000EEA  0E00               	movlw	0
  3715  000EEC  6E06               	movwf	___awdiv@sign,c
  3716  000EEE  AE04               	btfss	___awdiv@divisor+1,7,c
  3717  000EF0  D006               	goto	l615
  3718  000EF2  6C03               	negf	___awdiv@divisor,c
  3719  000EF4  1E04               	comf	___awdiv@divisor+1,f,c
  3720  000EF6  B0D8               	btfsc	status,0,c
  3721  000EF8  2A04               	incf	___awdiv@divisor+1,f,c
  3722  000EFA  0E01               	movlw	1
  3723  000EFC  6E06               	movwf	___awdiv@sign,c
  3724  000EFE                     l615:
  3725  000EFE  AE02               	btfss	___awdiv@dividend+1,7,c
  3726  000F00  D006               	goto	l616
  3727  000F02  6C01               	negf	___awdiv@dividend,c
  3728  000F04  1E02               	comf	___awdiv@dividend+1,f,c
  3729  000F06  B0D8               	btfsc	status,0,c
  3730  000F08  2A02               	incf	___awdiv@dividend+1,f,c
  3731  000F0A  0E01               	movlw	1
  3732  000F0C  1A06               	xorwf	___awdiv@sign,f,c
  3733  000F0E                     l616:
  3734  000F0E  0E00               	movlw	0
  3735  000F10  6E08               	movwf	___awdiv@quotient+1,c
  3736  000F12  0E00               	movlw	0
  3737  000F14  6E07               	movwf	___awdiv@quotient,c
  3738  000F16  5003               	movf	___awdiv@divisor,w,c
  3739  000F18  1004               	iorwf	___awdiv@divisor+1,w,c
  3740  000F1A  B4D8               	btfsc	status,2,c
  3741  000F1C  D01C               	goto	l623
  3742  000F1E  0E01               	movlw	1
  3743  000F20  6E05               	movwf	___awdiv@counter,c
  3744  000F22  D004               	goto	l618
  3745  000F24  90D8               	bcf	status,0,c
  3746  000F26  3603               	rlcf	___awdiv@divisor,f,c
  3747  000F28  3604               	rlcf	___awdiv@divisor+1,f,c
  3748  000F2A  2A05               	incf	___awdiv@counter,f,c
  3749  000F2C                     l618:
  3750  000F2C  AE04               	btfss	___awdiv@divisor+1,7,c
  3751  000F2E  D7FA               	goto	l619
  3752  000F30                     u720:
  3753  000F30  90D8               	bcf	status,0,c
  3754  000F32  3607               	rlcf	___awdiv@quotient,f,c
  3755  000F34  3608               	rlcf	___awdiv@quotient+1,f,c
  3756  000F36  5003               	movf	___awdiv@divisor,w,c
  3757  000F38  5C01               	subwf	___awdiv@dividend,w,c
  3758  000F3A  5004               	movf	___awdiv@divisor+1,w,c
  3759  000F3C  5802               	subwfb	___awdiv@dividend+1,w,c
  3760  000F3E  A0D8               	btfss	status,0,c
  3761  000F40  D005               	goto	l622
  3762  000F42  5003               	movf	___awdiv@divisor,w,c
  3763  000F44  5E01               	subwf	___awdiv@dividend,f,c
  3764  000F46  5004               	movf	___awdiv@divisor+1,w,c
  3765  000F48  5A02               	subwfb	___awdiv@dividend+1,f,c
  3766  000F4A  8007               	bsf	___awdiv@quotient,0,c
  3767  000F4C                     l622:
  3768  000F4C  90D8               	bcf	status,0,c
  3769  000F4E  3204               	rrcf	___awdiv@divisor+1,f,c
  3770  000F50  3203               	rrcf	___awdiv@divisor,f,c
  3771  000F52  2E05               	decfsz	___awdiv@counter,f,c
  3772  000F54  D7ED               	goto	u720
  3773  000F56                     l623:
  3774  000F56  5006               	movf	___awdiv@sign,w,c
  3775  000F58  B4D8               	btfsc	status,2,c
  3776  000F5A  D004               	goto	l624
  3777  000F5C  6C07               	negf	___awdiv@quotient,c
  3778  000F5E  1E08               	comf	___awdiv@quotient+1,f,c
  3779  000F60  B0D8               	btfsc	status,0,c
  3780  000F62  2A08               	incf	___awdiv@quotient+1,f,c
  3781  000F64                     l624:
  3782  000F64  C007  F001         	movff	___awdiv@quotient,?___awdiv
  3783  000F68  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  3784  000F6C  0012               	return	
  3785  000F6E                     __end_of___awdiv:
  3786                           	opt stack 0
  3787                           tblptru	equ	0xFF8
  3788                           tblptrh	equ	0xFF7
  3789                           tblptrl	equ	0xFF6
  3790                           tablat	equ	0xFF5
  3791                           intcon	equ	0xFF2
  3792                           intcon2	equ	0xFF1
  3793                           postinc0	equ	0xFEE
  3794                           wreg	equ	0xFE8
  3795                           indf2	equ	0xFDF
  3796                           postinc2	equ	0xFDE
  3797                           postdec2	equ	0xFDD
  3798                           fsr2h	equ	0xFDA
  3799                           fsr2l	equ	0xFD9
  3800                           status	equ	0xFD8
  3801                           
  3802 ;; *************** function _ProbeDelay *****************
  3803 ;; Defined at:
  3804 ;;		line 233 in file "main.c"
  3805 ;; Parameters:    Size  Location     Type
  3806 ;;  delay           1    wreg     unsigned char 
  3807 ;; Auto vars:     Size  Location     Type
  3808 ;;  delay           1    1[COMRAM] unsigned char 
  3809 ;;  j               1    2[COMRAM] unsigned char 
  3810 ;; Return value:  Size  Location     Type
  3811 ;;                  1    wreg      void 
  3812 ;; Registers used:
  3813 ;;		wreg, status,2, status,0, cstack
  3814 ;; Tracked objects:
  3815 ;;		On entry : 0/0
  3816 ;;		On exit  : 0/0
  3817 ;;		Unchanged: 0/0
  3818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3819 ;;      Params:         0       0       0       0       0       0       0
  3820 ;;      Locals:         2       0       0       0       0       0       0
  3821 ;;      Temps:          1       0       0       0       0       0       0
  3822 ;;      Totals:         3       0       0       0       0       0       0
  3823 ;;Total ram usage:        3 bytes
  3824 ;; Hardware stack levels used:    1
  3825 ;; This function calls:
  3826 ;;		Nothing
  3827 ;; This function is called by:
  3828 ;;		_main
  3829 ;;		_NormalWork
  3830 ;;		_MinMax
  3831 ;;		_TimerTest
  3832 ;; This function uses a non-reentrant model
  3833 ;;
  3834                           
  3835                           	psect	text25
  3836  0010C6                     __ptext25:
  3837                           	opt stack 0
  3838  0010C6                     _ProbeDelay:
  3839                           	opt stack 29
  3840                           
  3841                           ;incstack = 0
  3842                           ;ProbeDelay@delay stored from wreg
  3843  0010C6  6E02               	movwf	ProbeDelay@delay,c
  3844                           
  3845                           ;main.c: 234: uint8_t j;
  3846                           ;main.c: 235: for (j = 0;j <= delay; j++){
  3847  0010C8  0E00               	movlw	0
  3848  0010CA  6E03               	movwf	ProbeDelay@j,c
  3849  0010CC  D009               	goto	l327
  3850  0010CE                     
  3851                           ;main.c: 236: _delay((unsigned long)((1)*(64000000/4000.0)));
  3852  0010CE  0E15               	movlw	21
  3853  0010D0  6E01               	movwf	??_ProbeDelay& (0+255),c
  3854  0010D2  0EC6               	movlw	198
  3855  0010D4                     u1247:
  3856  0010D4  2EE8               	decfsz	wreg,f,c
  3857  0010D6  D7FE               	bra	u1247
  3858  0010D8  2E01               	decfsz	??_ProbeDelay& (0+255),f,c
  3859  0010DA  D7FC               	bra	u1247
  3860  0010DC  D000               	nop2	
  3861  0010DE  2A03               	incf	ProbeDelay@j,f,c
  3862  0010E0                     l327:
  3863  0010E0  5003               	movf	ProbeDelay@j,w,c
  3864  0010E2  5C02               	subwf	ProbeDelay@delay,w,c
  3865  0010E4  A0D8               	btfss	status,0,c
  3866  0010E6  0012               	return	
  3867  0010E8  D7F2               	goto	l328
  3868  0010EA                     __end_of_ProbeDelay:
  3869                           	opt stack 0
  3870                           tblptru	equ	0xFF8
  3871                           tblptrh	equ	0xFF7
  3872                           tblptrl	equ	0xFF6
  3873                           tablat	equ	0xFF5
  3874                           intcon	equ	0xFF2
  3875                           intcon2	equ	0xFF1
  3876                           postinc0	equ	0xFEE
  3877                           wreg	equ	0xFE8
  3878                           indf2	equ	0xFDF
  3879                           postinc2	equ	0xFDE
  3880                           postdec2	equ	0xFDD
  3881                           fsr2h	equ	0xFDA
  3882                           fsr2l	equ	0xFD9
  3883                           status	equ	0xFD8
  3884                           
  3885 ;; *************** function _ADC_GetConversion *****************
  3886 ;; Defined at:
  3887 ;;		line 108 in file "mcc_generated_files/adc.c"
  3888 ;; Parameters:    Size  Location     Type
  3889 ;;  channel         1    wreg     enum E6661
  3890 ;; Auto vars:     Size  Location     Type
  3891 ;;  channel         1    4[COMRAM] enum E6661
  3892 ;; Return value:  Size  Location     Type
  3893 ;;                  2    0[COMRAM] unsigned int 
  3894 ;; Registers used:
  3895 ;;		wreg, status,2, status,0
  3896 ;; Tracked objects:
  3897 ;;		On entry : 0/0
  3898 ;;		On exit  : 0/0
  3899 ;;		Unchanged: 0/0
  3900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3901 ;;      Params:         2       0       0       0       0       0       0
  3902 ;;      Locals:         1       0       0       0       0       0       0
  3903 ;;      Temps:          2       0       0       0       0       0       0
  3904 ;;      Totals:         5       0       0       0       0       0       0
  3905 ;;Total ram usage:        5 bytes
  3906 ;; Hardware stack levels used:    1
  3907 ;; This function calls:
  3908 ;;		Nothing
  3909 ;; This function is called by:
  3910 ;;		_analog_send
  3911 ;;		_NormalWork
  3912 ;;		_MinMax
  3913 ;; This function uses a non-reentrant model
  3914 ;;
  3915                           
  3916                           	psect	text26
  3917  001014                     __ptext26:
  3918                           	opt stack 0
  3919  001014                     _ADC_GetConversion:
  3920                           	opt stack 29
  3921                           
  3922                           ;incstack = 0
  3923                           ;ADC_GetConversion@channel stored from wreg
  3924  001014  6E05               	movwf	ADC_GetConversion@channel,c
  3925                           
  3926                           ;adc.c: 111: ADCON0bits.CHS = channel;
  3927  001016  C005  F003         	movff	ADC_GetConversion@channel,??_ADC_GetConversion
  3928  00101A  4603               	rlncf	??_ADC_GetConversion,f,c
  3929  00101C  4603               	rlncf	??_ADC_GetConversion,f,c
  3930  00101E  50C2               	movf	4034,w,c	;volatile
  3931  001020  1803               	xorwf	??_ADC_GetConversion,w,c
  3932  001022  0B83               	andlw	-125
  3933  001024  1803               	xorwf	??_ADC_GetConversion,w,c
  3934  001026  6EC2               	movwf	4034,c	;volatile
  3935                           
  3936                           ;adc.c: 114: ADCON0bits.ADON = 1;
  3937  001028  80C2               	bsf	4034,0,c	;volatile
  3938                           
  3939                           ;adc.c: 117: ADCON0bits.GO_nDONE = 1;
  3940  00102A  82C2               	bsf	4034,1,c	;volatile
  3941  00102C                     
  3942                           ;adc.c: 121: {
  3943  00102C  B2C2               	btfsc	4034,1,c	;volatile
  3944  00102E  D7FE               	goto	l101
  3945                           
  3946                           ;adc.c: 122: }
  3947                           ;adc.c: 124: return ((ADRESH << 8) + ADRESL);
  3948  001030  50C4               	movf	4036,w,c	;volatile
  3949  001032  6E04               	movwf	(??_ADC_GetConversion+1)& (0+255),c
  3950  001034  6A03               	clrf	??_ADC_GetConversion& (0+255),c
  3951  001036  50C3               	movf	4035,w,c	;volatile
  3952  001038  2403               	addwf	??_ADC_GetConversion,w,c
  3953  00103A  6E01               	movwf	?_ADC_GetConversion,c
  3954  00103C  0E00               	movlw	0
  3955  00103E  2004               	addwfc	??_ADC_GetConversion+1,w,c
  3956  001040  6E02               	movwf	?_ADC_GetConversion+1,c
  3957  001042  0012               	return	
  3958  001044                     __end_of_ADC_GetConversion:
  3959                           	opt stack 0
  3960                           tblptru	equ	0xFF8
  3961                           tblptrh	equ	0xFF7
  3962                           tblptrl	equ	0xFF6
  3963                           tablat	equ	0xFF5
  3964                           intcon	equ	0xFF2
  3965                           intcon2	equ	0xFF1
  3966                           postinc0	equ	0xFEE
  3967                           wreg	equ	0xFE8
  3968                           indf2	equ	0xFDF
  3969                           postinc2	equ	0xFDE
  3970                           postdec2	equ	0xFDD
  3971                           fsr2h	equ	0xFDA
  3972                           fsr2l	equ	0xFD9
  3973                           status	equ	0xFD8
  3974                           
  3975 ;; *************** function _EUSART1_Read *****************
  3976 ;; Defined at:
  3977 ;;		line 75 in file "mcc_generated_files/eusart1.c"
  3978 ;; Parameters:    Size  Location     Type
  3979 ;;		None
  3980 ;; Auto vars:     Size  Location     Type
  3981 ;;		None
  3982 ;; Return value:  Size  Location     Type
  3983 ;;                  1    wreg      unsigned char 
  3984 ;; Registers used:
  3985 ;;		wreg, status,2
  3986 ;; Tracked objects:
  3987 ;;		On entry : 0/0
  3988 ;;		On exit  : 0/0
  3989 ;;		Unchanged: 0/0
  3990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3991 ;;      Params:         0       0       0       0       0       0       0
  3992 ;;      Locals:         0       0       0       0       0       0       0
  3993 ;;      Temps:          0       0       0       0       0       0       0
  3994 ;;      Totals:         0       0       0       0       0       0       0
  3995 ;;Total ram usage:        0 bytes
  3996 ;; Hardware stack levels used:    1
  3997 ;; This function calls:
  3998 ;;		Nothing
  3999 ;; This function is called by:
  4000 ;;		_main
  4001 ;; This function uses a non-reentrant model
  4002 ;;
  4003                           
  4004                           	psect	text27
  4005  0011A0                     __ptext27:
  4006                           	opt stack 0
  4007  0011A0                     _EUSART1_Read:
  4008                           	opt stack 30
  4009                           
  4010                           ;eusart1.c: 78: {
  4011                           
  4012                           ;eusart1.c: 77: while(!PIR1bits.RC1IF)
  4013                           
  4014                           ;incstack = 0
  4015  0011A0  AA9E               	btfss	3998,5,c	;volatile
  4016  0011A2  D7FE               	goto	_EUSART1_Read
  4017                           
  4018                           ;eusart1.c: 79: }
  4019                           ;eusart1.c: 82: if(1 == RCSTA1bits.OERR)
  4020  0011A4  A2AB               	btfss	4011,1,c	;volatile
  4021  0011A6  D002               	goto	l130
  4022                           
  4023                           ;eusart1.c: 83: {
  4024                           ;eusart1.c: 86: RCSTA1bits.CREN = 0;
  4025  0011A8  98AB               	bcf	4011,4,c	;volatile
  4026                           
  4027                           ;eusart1.c: 87: RCSTA1bits.CREN = 1;
  4028  0011AA  88AB               	bsf	4011,4,c	;volatile
  4029  0011AC                     l130:
  4030                           
  4031                           ;eusart1.c: 88: }
  4032                           ;eusart1.c: 90: return RCREG1;
  4033  0011AC  50AE               	movf	4014,w,c	;volatile
  4034  0011AE  0012               	return	
  4035  0011B0                     __end_of_EUSART1_Read:
  4036                           	opt stack 0
  4037                           tblptru	equ	0xFF8
  4038                           tblptrh	equ	0xFF7
  4039                           tblptrl	equ	0xFF6
  4040                           tablat	equ	0xFF5
  4041                           intcon	equ	0xFF2
  4042                           intcon2	equ	0xFF1
  4043                           postinc0	equ	0xFEE
  4044                           wreg	equ	0xFE8
  4045                           indf2	equ	0xFDF
  4046                           postinc2	equ	0xFDE
  4047                           postdec2	equ	0xFDD
  4048                           fsr2h	equ	0xFDA
  4049                           fsr2l	equ	0xFD9
  4050                           status	equ	0xFD8
  4051                           tblptru	equ	0xFF8
  4052                           tblptrh	equ	0xFF7
  4053                           tblptrl	equ	0xFF6
  4054                           tablat	equ	0xFF5
  4055                           intcon	equ	0xFF2
  4056                           intcon2	equ	0xFF1
  4057                           postinc0	equ	0xFEE
  4058                           wreg	equ	0xFE8
  4059                           indf2	equ	0xFDF
  4060                           postinc2	equ	0xFDE
  4061                           postdec2	equ	0xFDD
  4062                           fsr2h	equ	0xFDA
  4063                           fsr2l	equ	0xFD9
  4064                           status	equ	0xFD8
  4065                           
  4066                           	psect	rparam
  4067  0000                     tblptru	equ	0xFF8
  4068                           tblptrh	equ	0xFF7
  4069                           tblptrl	equ	0xFF6
  4070                           tablat	equ	0xFF5
  4071                           intcon	equ	0xFF2
  4072                           intcon2	equ	0xFF1
  4073                           postinc0	equ	0xFEE
  4074                           wreg	equ	0xFE8
  4075                           indf2	equ	0xFDF
  4076                           postinc2	equ	0xFDE
  4077                           postdec2	equ	0xFDD
  4078                           fsr2h	equ	0xFDA
  4079                           fsr2l	equ	0xFD9
  4080                           status	equ	0xFD8


Data Sizes:
    Strings     4
    Constant    0
    Data        3
    BSS         9
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     84      94
    BANK0           160      0       2
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    MinMax@prumer	PTR unsigned int  size(2) Largest target is 2
		 -> Calibrate@prumer(COMRAM[2]), AutoSet@prumer(COMRAM[2]), 

    MinMax@max	PTR unsigned int  size(2) Largest target is 2
		 -> Calibrate@max(COMRAM[2]), AutoSet@max(COMRAM[2]), 

    MinMax@min	PTR unsigned int  size(2) Largest target is 2
		 -> Calibrate@min(COMRAM[2]), AutoSet@min(COMRAM[2]), 

    SendToSPI@table	PTR unsigned char  size(2) Largest target is 2
		 -> Calibrate@table(COMRAM[2]), main@spiBuffer(COMRAM[2]), 

    AutoSet@weld	PTR unsigned int  size(2) Largest target is 2
		 -> main@weld_detect(COMRAM[2]), 

    AutoSet@detect	PTR unsigned int  size(2) Largest target is 4
		 -> main@level_detect(COMRAM[4]), 

    NormalWork@delay	PTR unsigned char  size(2) Largest target is 1
		 -> main@probe_delay(COMRAM[1]), 

    NormalWork@level_detect	PTR unsigned int  size(2) Largest target is 4
		 -> main@level_detect(COMRAM[4]), 

    NormalWork@weld_detect	PTR unsigned int  size(2) Largest target is 2
		 -> main@weld_detect(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_NormalWork
    _analog_send->_ADC_GetConversion
    _analog_send->_DataSend
    _TimerTest->_TMR0_ReadTimer
    _SYSTEM_Initialize->_TMR0_Initialize
    _NormalWork->_AutoSet
    _DataSend->_EUSART1_Write
    _AutoSet->_Calibrate
    _Calibrate->_MinMax
    _SendToSPI->_SPI1_Exchange8bit
    _MinMax->___awdiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                20    20      0   31294
                                             68 COMRAM    16    16      0
                            _AutoSet
                          _Calibrate
                           _DataSend
                       _EUSART1_Read
                      _EUSART1_Write
                         _NormalWork
                         _ProbeDelay
                  _SYSTEM_Initialize
                          _SendToSPI
                          _TimerTest
                        _analog_send
 ---------------------------------------------------------------------------------
 (1) _analog_send                                          5     5      0     857
                                              5 COMRAM     3     3      0
                  _ADC_GetConversion
                           _DataSend
 ---------------------------------------------------------------------------------
 (1) _TimerTest                                            2     2      0     440
                                              8 COMRAM     2     2      0
                         _ProbeDelay
            _TMR0_HasOverflowOccured
                     _TMR0_ReadTimer
                    _TMR0_StartTimer
                     _TMR0_StopTimer
                    _TMR0_WriteTimer
 ---------------------------------------------------------------------------------
 (2) _TMR0_WriteTimer                                      2     0      2     272
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR0_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_ReadTimer                                       8     6      2      69
                                              0 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (2) _TMR0_HasOverflowOccured                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                     _ADC_Initialize
                    _CCP5_Initialize
                 _EUSART1_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _SPI1_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _SPI1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CCP5_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _NormalWork                                          16    10      6   12111
                                             52 COMRAM    16    10      6
                  _ADC_GetConversion
                            _AutoSet
                           _DataSend
                         _ProbeDelay
 ---------------------------------------------------------------------------------
 (2) _DataSend                                             4     2      2     789
                                              1 COMRAM     4     2      2
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Write                                        1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _AutoSet                                             17    13      4   10188
                                             37 COMRAM    15    11      4
                          _Calibrate
                             _MinMax
 ---------------------------------------------------------------------------------
 (3) _Calibrate                                           16    16      0    5563
                                             25 COMRAM    12    12      0
                             _MinMax
                          _SendToSPI
 ---------------------------------------------------------------------------------
 (1) _SendToSPI                                            8     6      2     674
                                              1 COMRAM     8     6      2
                  _SPI1_Exchange8bit
 ---------------------------------------------------------------------------------
 (2) _SPI1_Exchange8bit                                    1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _MinMax                                              17    10      7    3752
                                              8 COMRAM    17    10      7
                  _ADC_GetConversion
                         _ProbeDelay
                            ___awdiv
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     452
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _ProbeDelay                                           3     3      0      30
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _ADC_GetConversion                                    5     3      2      22
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _EUSART1_Read                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AutoSet
     _Calibrate
       _MinMax
         _ADC_GetConversion
         _ProbeDelay
         ___awdiv
       _SendToSPI
         _SPI1_Exchange8bit
     _MinMax
       _ADC_GetConversion
       _ProbeDelay
       ___awdiv
   _Calibrate
     _MinMax
       _ADC_GetConversion
       _ProbeDelay
       ___awdiv
     _SendToSPI
       _SPI1_Exchange8bit
   _DataSend
     _EUSART1_Write
   _EUSART1_Read
   _EUSART1_Write
   _NormalWork
     _ADC_GetConversion
     _AutoSet
       _Calibrate
         _MinMax
           _ADC_GetConversion
           _ProbeDelay
           ___awdiv
         _SendToSPI
           _SPI1_Exchange8bit
       _MinMax
         _ADC_GetConversion
         _ProbeDelay
         ___awdiv
     _DataSend
       _EUSART1_Write
     _ProbeDelay
   _ProbeDelay
   _SYSTEM_Initialize
     _ADC_Initialize
     _CCP5_Initialize
     _EUSART1_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _SPI1_Initialize
     _TMR0_Initialize
   _SendToSPI
     _SPI1_Exchange8bit
   _TimerTest
     _ProbeDelay
     _TMR0_HasOverflowOccured
     _TMR0_ReadTimer
     _TMR0_StartTimer
     _TMR0_StopTimer
     _TMR0_WriteTimer
   _analog_send
     _ADC_GetConversion
     _DataSend
       _EUSART1_Write

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0       2       4        1.2%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     54      5E       1       98.9%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      60       9        0.0%
DATA                 0      0      60      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Tue Feb  6 09:53:30 2018

               _SPI1_Exchange8bit 1190                ?_SPI1_Exchange8bit 0001  
 __end_of_TMR0_HasOverflowOccured 11CA                        AutoSet@max 0030  
                      AutoSet@min 002E                                l29 117A  
                    ___awdiv@sign 0006                 analog_send@analog 0006  
                 _timer0ReloadVal 0059                      __CFG_CP0$OFF 000000  
                    __CFG_CP1$OFF 000000                      __CFG_CP2$OFF 000000  
                    __CFG_CP3$OFF 000000                       __CFG_LVP$ON 000000  
                   SendToSPI@tmpH 0008                     SendToSPI@tmpL 0007  
                             l101 102C                               l130 11AC  
                             l301 0ABE                               l310 0B0C  
                             l302 0AC2                               l311 0B40  
                             l400 0920                               l312 0B4C  
                             l313 0B8E                               l305 0AD4  
                             l306 0AD8                               l315 0B94  
                             l420 0CFC                               l156 1198  
                             l404 0998                               l316 0BC6  
                             l421 0C6C                               l333 062C  
                             l309 0AEA                               l422 0CA2  
                             l350 0710                               l318 0BCE  
                             l327 10E0                               l423 0CD4  
                             l351 0746                               l328 10CE  
                             l424 0CF8                               l408 0A1C  
                             l432 0E72                               l345 06DA  
                             l337 0684                               l433 0E82  
                             l370 07DA                               l338 074E  
                             l346 0702                               l371 0810  
                             l347 06F6                               l443 0ED6  
                             l380 0D82                               l348 06E6  
                             l292 0A82                               l284 0A54  
                             l365 07A4                               l293 0A9A  
                             l622 0F4C                               l366 07CC  
                             l438 0EAC                               l286 0BD4  
                             l294 0A8C                               l623 0F56  
                             l615 0EFE                               l367 07C0  
                             l287 0A60                               l624 0F64  
                             l616 0F0E                               l384 0DA4  
                             l376 081A                               l368 07B0  
                             l296 0AA4                               l288 0A78  
                             l393 087A                               l289 0A6A  
                             l618 0F2C                               l619 0F24  
                             l395 0954                               l396 08BE  
                    __CFG_CPB$OFF 000000                       AutoSet@weld 0026  
                             u270 11C6                      __CFG_CPD$OFF 000000  
                             u720 0F30                               u910 0D7A  
                             u840 094E                               u930 0D9A  
                             u890 0A28               ??_SPI1_Exchange8bit 0001  
                             wreg 000FE8                   _CCP5_Initialize 1180  
                  SendToSPI@table 0002                       main@command 0052  
                  SendToSPI@value 0009                              l1191 11CC  
                            l2059 0A50                              l1797 087A  
                  SendToSPI@total 0005                              STR_1 0603  
                            STR_2 0601                              u1120 0E8E  
                            u1227 105E                              u1237 0F78  
                            _LATA 000F89                              _LATB 000F8A  
                            u1247 10D4                              _LATC 000F8B  
                            _WPUB 000F61                     _EUSART1_Write 11CA  
                            _main 0A2E                     ?_EUSART1_Read 0001  
                 _TMR0_StartTimer 11E4                              fsr2h 000FDA  
                            indf2 000FDF                              fsr2l 000FD9  
                   __CFG_BORV$190 000000                              start 0000  
       __end_of_SPI1_Exchange8bit 11A0                     __CFG_IESO$OFF 000000  
                     MinMax@count 0009                      ___param_bank 000000  
                 __end_of_AutoSet 0E56           __end_of_TMR0_Initialize 10C6  
                   AutoSet@analog 0032    __size_of_OSCILLATOR_Initialize 0012  
                   AutoSet@detect 0028     __end_of_OSCILLATOR_Initialize 1180  
                           ?_main 0001                   __end_of___awdiv 0F6E  
       TMR0_ReadTimer@readValHigh 0008                             _T0CON 000FD5  
                 ___awdiv@divisor 0003                    __CFG_DEBUG$OFF 000000  
                 _TMR0_WriteTimer 11D6                   ___awdiv@counter 0005  
                           _TMR0H 000FD7                             _TMR0L 000FD6  
                   AutoSet@prumer 0033                             _TRISA 000F92  
                           _TRISB 000F93                             _TRISC 000F94  
                   __CFG_WRT0$OFF 000000                     __CFG_WRT1$OFF 000000  
                   __CFG_WRT2$OFF 000000                     __CFG_WRT3$OFF 000000  
                  __CFG_EBTR0$OFF 000000                    __CFG_FCMEN$OFF 000000  
                  __CFG_EBTR1$OFF 000000                    __CFG_EBTR2$OFF 000000  
                  __CFG_EBTR3$OFF 000000                     __CFG_WRTB$OFF 000000  
                   __CFG_WRTC$OFF 000000                     __CFG_WRTD$OFF 000000  
                  __CFG_EBTRB$OFF 000000                             _filtr 005B  
              __CFG_MCLRE$EXTMCLR 000000                             main@i 004F  
                  ?_EUSART1_Write 0001                             tablat 000FF5  
                  ??_EUSART1_Read 0001                             status 000FD8  
                __end_of_DataSend 116E                    __CFG_HFOFST$ON 000000  
                    MinMax@analog 0013                    __CFG_FOSC$HSHP 000000  
        __size_of_SPI1_Initialize 000E                    __CFG_PBADEN$ON 000000  
            __size_of_analog_send 002E                      MinMax@result 0018  
                    MinMax@prumer 000E                   __initialization 0FDA  
              __size_of_Calibrate 020E        __end_of_EUSART1_Initialize 1158  
                    __end_of_main 0C1A                            ??_main 0045  
         __end_of_CCP5_Initialize 1190                     __activetblptr 000002  
                  __CFG_PLLCFG$ON 000000             analog_send@adc_result 0007  
         __end_of_TMR0_StartTimer 11E8                            _ADCON0 000FC2  
                          _ADCON1 000FC1                            _ADCON2 000FC0  
                          _ADRESH 000FC4                            _ADRESL 000FC3  
                          _CCPR5H 000F56                            _CCPR5L 000F55  
                ___awdiv@dividend 0001                            _ANSELA 000F38  
                          _ANSELB 000F39                            _ANSELC 000F3A  
                  __CFG_WDTEN$OFF 000000                   ProbeDelay@delay 0002  
                          _RCREG1 000FAE                            _RCSTA1 000FAB  
                          _OSCCON 000FD3                            _PLLRDY 007E97  
__size_of_TMR0_HasOverflowOccured 000C                            _SPBRG1 000FAF  
                          _TXREG1 000FAD                         ??_AutoSet 002A  
                          _TXSTA1 000FAC             SPI1_Exchange8bit@data 0001  
      __size_of_SPI1_Exchange8bit 0010                            _MinMax 0C1A  
         NormalWork@count_measure 003D                    __CFG_XINST$OFF 000000  
                      _NormalWork 0606                        _ProbeDelay 10C6  
              __size_of_SendToSPI 006C                         ??___awdiv 0005  
                  __CFG_STVREN$ON 000000           __end_of_TMR0_WriteTimer 11E0  
                          _readDA 005C                  ?_TMR0_Initialize 0001  
                          _offset 005E                            clear_0 1004  
                   main@spiBuffer 0047                  ___awdiv@quotient 0007  
              __size_of_TimerTest 0094                      __pdataCOMRAM 005C  
                    __mediumconst 0000                            tblptrh 000FF7  
                          tblptrl 000FF6                            tblptru 000FF8  
        ADC_GetConversion@channel 0005                 __end_of_Calibrate 0A2E  
                 ??_EUSART1_Write 0001                   Calibrate@diff_1 001B  
                 Calibrate@diff_2 001C                   Calibrate@analog 001F  
               _SYSTEM_Initialize 1108                        __accesstop 0060  
         __end_of__initialization 100A                ?_SYSTEM_Initialize 0001  
                   ___rparam_used 000001                   Calibrate@prumer 0024  
                  __pcstackCOMRAM 0001               ??_SYSTEM_Initialize 0003  
               ??_SPI1_Initialize 0001           __size_of_TMR0_ReadTimer 001E  
            __end_of_EUSART1_Read 11B0                  ?_CCP5_Initialize 0001  
                       ?_DataSend 0002                    TimerTest@value 0009  
                ?_TMR0_StartTimer 0001                      _analog_count 005D  
               __end_of_SendToSPI 0FDA         __end_of_SYSTEM_Initialize 1126  
                      _calm_state 0055                        __pbssBANK0 0060  
               __end_of_TimerTest 0EEA                           ?_MinMax 0009  
              __CFG_CCP2MX$PORTC1 000000                       ?_NormalWork 0035  
         __size_of_TMR0_StopTimer 0004                       ?_ProbeDelay 0001  
              __CFG_CCP3MX$PORTB5 000000                  ?_TMR0_WriteTimer 0001  
                         _CCP5CON 000F54           __size_of_ADC_Initialize 001C  
                      ??_DataSend 0004                           _OSCCON2 000FD2  
                         _OSCTUNE 000F9B                           _SPBRGH1 000FB0  
                         _SSP1ADD 000FC8                           _SSP1BUF 000FC9  
                         MinMax@i 0016           _TMR0_HasOverflowOccured 11BE  
                     ProbeDelay@j 0003                           _AutoSet 0D3A  
                 __CFG_PWRTEN$OFF 000000                           __Hparam 0000  
                 __size_of_MinMax 0120                           __Lparam 0000  
                    Calibrate@max 0022                      Calibrate@min 0020  
                         ___awdiv 0EEA                      __psmallconst 0600  
                         __pcinit 0FDA                           __ramtop 0600  
                         __ptext0 0A2E                           __ptext1 1044  
                         __ptext2 0E56                           __ptext3 11D6  
                         __ptext4 11E0                           __ptext5 11E4  
                         __ptext6 10EA                           __ptext7 11BE  
                         __ptext8 1108                           __ptext9 10A0  
                       _T0CONbits 000FD5             _OSCILLATOR_Initialize 116E  
              _EUSART1_Initialize 1142          ??_PIN_MANAGER_Initialize 0001  
             __size_of_NormalWork 021A        __size_of_SYSTEM_Initialize 001E  
             __size_of_ProbeDelay 0024              end_of_initialization 100A  
             ?_EUSART1_Initialize 0001                      DataSend@data 0002  
                   ??_analog_send 0006                     __Lmediumconst 0000  
           TMR0_ReadTimer@readVal 0005                           postdec2 000FDD  
                         postinc0 000FEE                           postinc2 000FDE  
           __size_of_EUSART1_Read 0010             NormalWork@weld_detect 0035  
                  _TMR0_ReadTimer 10EA              ??_EUSART1_Initialize 0001  
                       _PORTBbits 000F81         ??_TMR0_HasOverflowOccured 0001  
             EUSART1_Write@txData 0001                      SendToSPI@set 0006  
                       MinMax@max 000C                         MinMax@min 000A  
                       MinMax@tmp 0014                         _Calibrate 0820  
                      main@analog 0053                   _SPI1_Initialize 11B0  
                    _EUSART1_Read 11A0                  main@level_detect 004B  
                  _TMR0_StopTimer 11E0                    __end_of_MinMax 0D3A  
             __end_of_analog_send 1072            __end_of_TMR0_ReadTimer 1108  
                   __pidataCOMRAM 11E8                    _ADC_Initialize 1126  
          ?_OSCILLATOR_Initialize 0001               start_initialization 0FDA  
        __size_of_TMR0_Initialize 0026   __size_of_PIN_MANAGER_Initialize 002E  
               __size_of_DataSend 0016             __end_of_EUSART1_Write 11D6  
                      ?_Calibrate 0001                         _SendToSPI 0F6E  
          __end_of_TMR0_StopTimer 11E4                          ??_MinMax 0010  
                    ??_NormalWork 003B                      ??_ProbeDelay 0001  
                 ?_TMR0_ReadTimer 0001                         _TimerTest 0E56  
          __end_of_ADC_Initialize 1142                    Calibrate@calib 001A  
                  Calibrate@table 001D                       __pbssCOMRAM 0055  
            NormalWork@count_1130 0040           __end_of_SPI1_Initialize 11BE  
              __end_of_NormalWork 0820          __size_of_CCP5_Initialize 0010  
              __end_of_ProbeDelay 10EA                        ?_SendToSPI 0002  
                     _analog_send 1044                          ?_AutoSet 0026  
        __size_of_TMR0_StartTimer 0004                   ?_TMR0_StopTimer 0001  
          _PIN_MANAGER_Initialize 1072                        ?_TimerTest 0001  
                        ?___awdiv 0001                   ?_ADC_Initialize 0001  
          NormalWork@level_detect 0039                  __CFG_PRICLKEN$ON 000000  
                     __smallconst 0600                          _BAUDCON1 000FB8  
        __size_of_TMR0_WriteTimer 000A                       ??_Calibrate 001A  
               ??_TMR0_Initialize 0001                          _LATAbits 000F89  
                        _LATBbits 000F8A                          _LATCbits 000F8B  
                        _PIR1bits 000F9E                  __CFG_WDTPS$32768 000000  
                        _SSP1CON1 000FC6                          _SSP1STAT 000FC7  
                        _VREFCON0 000F42          TMR0_ReadTimer@readValLow 0007  
                      _ADCON0bits 000FC2                          _DataSend 1158  
                       main@readH 0049                         main@readL 004A  
                ?_SPI1_Initialize 0001                       _INTCON2bits 000FF1  
                     ??_SendToSPI 0004                  NormalWork@analog 0042  
                     _auto_offset 0060                 ??_CCP5_Initialize 0001  
                __size_of_AutoSet 011C                  NormalWork@result 0043  
                        __Hrparam 0000                          __Lrparam 0000  
               _ADC_GetConversion 1014                __CFG_BOREN$SBORDIS 000000  
                     ??_TimerTest 0009                 __CFG_P2BMX$PORTB5 000000  
         ??_OSCILLATOR_Initialize 0001                ?_ADC_GetConversion 0001  
               ??_TMR0_StartTimer 0001                  __size_of___awdiv 0084  
     __size_of_EUSART1_Initialize 0016               ??_ADC_GetConversion 0003  
                        __ptext10 11B0                          __ptext11 1072  
                        __ptext20 0820                          __ptext12 116E  
                        __ptext21 0F6E                          __ptext13 1142  
                        __ptext22 1190                          __ptext14 1180  
                        __ptext23 0C1A                          __ptext15 1126  
                        __ptext24 0EEA                          __ptext16 0606  
                        __ptext25 10C6                          __ptext17 1158  
                        __ptext26 1014                          __ptext18 11CA  
                        __ptext27 11A0                          __ptext19 0D3A  
                    _SSP1CON1bits 000FC6           TMR0_WriteTimer@timerVal 0001  
               ??_TMR0_WriteTimer 0003                     __size_of_main 01EC  
                ??_TMR0_ReadTimer 0003         __end_of_ADC_GetConversion 1044  
                    _SSP1STATbits 000FC7          ?_TMR0_HasOverflowOccured 0001  
                 NormalWork@delay 0037                        _INTCONbits 000FF2  
                 NormalWork@count 003F                   main@weld_detect 0050  
                 main@probe_delay 0054                     DataSend@sendH 0005  
                   DataSend@sendL 0004                  ??_TMR0_StopTimer 0001  
                    ?_analog_send 0001           ?_PIN_MANAGER_Initialize 0001  
                      _RCSTA1bits 000FAB                  ??_ADC_Initialize 0001  
                  NormalWork@weld 0041            __size_of_EUSART1_Write 000C  
                 _TMR0_Initialize 10A0                 __CFG_T3CMX$PORTC0 000000  
  __end_of_PIN_MANAGER_Initialize 10A0        __size_of_ADC_GetConversion 0030  
